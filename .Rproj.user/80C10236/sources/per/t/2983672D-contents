---
title: "paper3_si_190824"
output: html_document
---

#Setup 

```{r setup, include=FALSE}
fig_num<-0
tab_num<-0
fig_name<-TRUE
tab_name<-TRUE
word_width = 6.5
knitr::opts_chunk$set(
	echo = FALSE,
	fig.keep = "all",
	fig.show = "asis",
	fig.width = word_width,
	message = FALSE,
	warning = FALSE,
	dev='png',
	dpi=300
)
knitr::opts_knit$set(root.dir = '../')
#Width of the available space in the word document

#Own functions

library(ggplot2)
library(ggthemes)
library(scales)
library(RColorBrewer)
library(ggrepel)
library(cowplot)
#Defines the themes of the plots
theme_milovanoff <- function(base_size=14,legend_position="bottom",...) {
  theme_tmp <- theme_foundation(base_size=base_size)+
    theme(plot.title = element_text(face = "bold",size = rel(1.2), hjust = 0.5),
          text = element_text(),
          panel.background = element_rect(colour = NA),
          plot.background = element_rect(colour = NA),
          panel.border = element_rect(colour = NA),
          axis.title = element_text(face = "bold",size = rel(1)),
          axis.title.y = element_text(angle=90,vjust = 0.5),
          axis.title.x = element_text(vjust = 0.5),
          axis.text = element_text(), 
          axis.line = element_line(colour="black"),
          axis.ticks = element_line(),
          panel.grid.major = element_line(colour="#f0f0f0"),
          panel.grid.minor = element_blank(),
          legend.key = element_rect(colour = NA),
          legend.key.height = unit(0.3, "cm"),
          legend.key.width = unit(0.3, "cm"),
          legend.margin = margin(t=0.1,r=0.1,b=0.1,l=0.1, "cm"),
          legend.text = element_text(size = rel(0.8)),
          legend.spacing.x = unit(0.1, "cm"),
          legend.spacing.y = unit(0.1, "cm"),
          plot.margin=unit(c(2,4,2,2),"mm"),
          strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),
          strip.text = element_text(face="bold"),
          panel.spacing.x = unit(0.2, "cm"),
          panel.spacing.y =unit(0.2, "cm")
    )
  if (legend_position=="bottom"){
    theme_tmp <- theme_tmp+
      theme(legend.box = "vertical",
            legend.box.just = "top",
            legend.position = "bottom",
            legend.direction = "horizontal",
            legend.title = element_text(face="italic",rel(1.1),hjust=0.5))
  } else if (legend_position=="right"){
    theme_tmp<-theme_tmp+
      theme(legend.box = "vertical",
            legend.box.just = "left",
            legend.position = "right",
            legend.direction = "vertical",
            legend.title = element_text(face="italic",rel(1.1),hjust=0))
  }
  theme_tmp <- theme_tmp + theme(...)
  return(theme_tmp)
}
#See here: https://betterfigures.org/2015/06/23/picking-a-colour-scale-for-scientific-graphics/

get_color_palette <- function(palette_type,number_color){
  if (palette_type=="seq_blue"){
    #colorblind safe. Limit=9
    color_palette <- brewer.pal(number_color,"Blues")
  } else if (palette_type=="seq_green"){
    #colorblind safe. Limit=9
    color_palette <- brewer.pal(number_color,"Greens")
  } else if (palette_type=="seq_red"){
    #colorblind safe. Limit=9
    color_palette <- brewer.pal(number_color,"YlOrRd")
  } else if(palette_type=="div"){
    #colorblind safe. Limit=11
    color_palette <- brewer.pal(number_color,"RdYlBu")
  } else if(palette_type=="cat"){
    #Not colorblind safe. Limit=8. Dark2 or Set1 work
    color_palette <- brewer.pal(number_color,"Dark2")
  } else if(palette_type=="paired"){
    #Not colorblind safe. Limit=12
    color_palette <- brewer.pal(number_color,"Paired")
  }
  return(color_palette)
}

scale_fill_milovanoff <- function(palette_type,number_color,...){
  discrete_scale("fill","milovanoff",manual_pal(values = get_color_palette(palette_type=palette_type,number_color=number_color)), ...)
}

scale_colour_milovanoff <- function(palette_type,number_color,...){
  discrete_scale("colour","milovanoff",manual_pal(values = get_color_palette(palette_type=palette_type,number_color=number_color)), ...)
  
}
```

#Transport Activity

##Historical values

###Load factors

```{r transport_activity_pkt,fig.height=3}
modelframework::load_input_data_f()
transport <- do.call(transport_activity_f,list())
res <- transport$get_list_dataframe()
plot_dt <- transport[["transport_load_factors"]]

table <- subset(plot_dt, Year %in% c(2005, 2010, 2015, 2018)) %>% spread(Year,Value)

write.csv(table, "outputs/plots/si/table_load_factors.csv",row.names = FALSE)
```

###Annual vehicle activity

```{r transport_activity_pkt,fig.height=3}
modelframework::load_input_data_f()
transport <- do.call(transport_activity_f,list())
plot_dt <- transport[["transport_kt_per_veh"]]

table <- subset(plot_dt, Year %in% c(2005, 2010, 2015, 2018)) %>% spread(Year,Value)

write.csv(table, "outputs/plots/si/table_annual_mileage.csv",row.names = FALSE)
```

###VKT
```{r transport_activity_vkt,fig.height=3}
modelframework::load_input_data_f()
transport <- do.call(transport_activity_f,list())
plot_dt <- subset(transport[["transport_vkt"]],Year%in%c(2005:2018))
ggplot()+
  geom_col(data=plot_dt,
           aes(x=Year,y=Value/10^6,fill=Mode))+
  scale_fill_milovanoff(palette_type="cat",
                        number_color=length(unique(plot_dt$Mode)),
                        guide=guide_legend(title="Tranport mode"))+
  scale_y_continuous(expand = c(0.01,0))+
  scale_x_continuous(expand = c(0.01,0),breaks = seq(2005,2030,5))+
  labs(x=NULL,y="Vehicle activity \n (billion vkt)")+
  theme_milovanoff(legend_position = "right")

ggsave("outputs/plots/si/hist_vkt.png",width=word_width,height=3,units=c("in"),dpi=600)
pkt_tot_dt <- aggregate(formula=Value~Year,data=plot_dt,FUN=sum)
```

###PKT
```{r transport_activity_pkt,fig.height=3}
modelframework::load_input_data_f()
transport <- do.call(transport_activity_f,list())
plot_dt <- subset(transport[["transport_pkt"]],Year%in%c(2005:2018))
ggplot()+
  geom_col(data=plot_dt,
           aes(x=Year,y=Value/10^6,fill=Mode))+
  scale_fill_milovanoff(palette_type="cat",
                        number_color=length(unique(plot_dt$Mode)),
                        guide=guide_legend(title="Tranport mode"))+
  scale_y_continuous(expand = c(0.01,0))+
  scale_x_continuous(expand = c(0.01,0),breaks = seq(2005,2030,5))+
  labs(x=NULL,y="Passenger activity \n (billion pkt)")+
  theme_milovanoff(legend_position = "right")

ggsave("outputs/plots/si/hist_pkt.png",width=word_width,height=3,units=c("in"),dpi=600)
pkt_tot_dt <- aggregate(formula=Value~Year,data=plot_dt,FUN=sum)
#Numerical results
sum(subset(plot_dt,Mode%in%c("MRT","LRT","Public bus") & Year%in%c(2012))$Value)/10^6
sum(subset(plot_dt,Mode%in%c("MRT","LRT","Public bus") & Year%in%c(2018))$Value)/10^6
```

##Prospective values

###Populaton and motorized passenger activity
```{r prospective_pkt, fig.height=2.5}
modelframework::load_input_data_f()
transport <- do.call(transport_activity_f,list())
transport_pkt <- aggregate(formula=Value~Year+Unit,data=subset(transport[["transport_pkt"]]),FUN=sum)

pop_dt <- subset(get_input_f("population"),Scenario =="Medium" & Year<=2030)

transport_pkt$Transport_intensity <- sapply(1:nrow(transport_pkt),function(x)transport_pkt[x,"Value"]/subset(pop_dt,Year==transport_pkt[x,"Year"])$Value)

#Linear regression
mat_tot_pkt <- subset(transport_pkt) %>%
  acast(data=., Unit ~ Year , value.var='Value',fun.aggregate=sum, margins=FALSE)
#Create matrix of population
mat_pop <- subset(pop_dt,Scenario=="Medium" & Year <= 2030) %>%
  acast(data=., Country ~ Year , value.var='Value',fun.aggregate=sum, margins=FALSE)
#Calculate linear regression
lin_reg <- lm(mat_tot_pkt[,as.character(2005:2018)]~mat_pop[,as.character(2005:2018)])

#Calculate the PKT/person


ggplot()+
  geom_line(data=transport_pkt,
           aes(x=Year,y=Value/10^6,colour="Passenger activity",linetype=ifelse(Year<2019,"Historical","Projeted")),
           size=1.1)+
  geom_line(data=pop_dt,
            aes(x=Year,y=Value/(10^5),colour="Population",linetype=ifelse(Year<2019,"Historical","Projeted")),
            size=1.1)+
  scale_y_continuous(expand = c(0.01,0),sec.axis = sec_axis(~./10,name="Population (million)"))+
  scale_x_continuous(expand = c(0.01,0),breaks = seq(2005,2030,5))+
  scale_colour_milovanoff(palette_type = "cat",number_color = 2,name=NULL)+
  scale_linetype(name=NULL)+
  labs(x=NULL,y="Passenger activity \n (billion pkt)")+
  theme_milovanoff(legend_position = "bottom",
                   axis.title.y.right =element_text(angle=90,hjust=0.6),
                   axis.title.y.left =element_text(hjust=0.5),
                   legend.key.width=unit(0.5,"cm"),
                   legend.box = "horizontal")

ggsave("outputs/plots/si/hist_proj_pkt_pop.png",width=word_width,height=3,units=c("in"),dpi=600)
pkt_tot_dt <- aggregate(formula=Value~Year,data=plot_dt,FUN=sum)
```


###PKT
```{r transport_modal_share,fig.height=3}
modelframework::load_input_data_f()
transport <- do.call(transport_activity_f,list())
plot_dt <- subset(transport[["transport_pkt"]],Year%in%c(2018:2030))

ggplot()+
  geom_col(data=plot_dt,
           aes(x=Year,y=Value/10^6,fill=Mode))+
  scale_fill_milovanoff(palette_type="cat",
                        number_color=length(unique(plot_dt$Mode)),
                        guide=guide_legend(title="Tranport mode"))+
  scale_y_continuous(expand = c(0.01,0))+
  scale_x_continuous(expand = c(0.01,0),breaks = seq(2005,2030,5))+
  labs(x=NULL,y="Passenger activity \n (billion pkt)")+
  theme_milovanoff(legend_position = "right")

ggsave("outputs/plots/si/proj_pkt.png",width=word_width,height=3,units=c("in"),dpi=600)

```


#Fleet module

##Survival rates

```{r survival_rates,fig.height=2.5}
survival_rates_dt <- read.csv("inputs/model/survival_rate_singapore.csv",stringsAsFactors = FALSE)
#

year_tbc <- 2006:2019
survival_rates_dt <- subset(survival_rates_dt,Year%in%year_tbc)
#Calculate cumulative survival rates
survival_rates_dt$Value <- sapply(1:nrow(survival_rates_dt),function(x)prod(subset(survival_rates_dt,Mode==survival_rates_dt[x,"Mode"] & Year==survival_rates_dt[x,"Year"] & Age<=survival_rates_dt[x,"Age"])$Value))

plot_dt <- subset(survival_rates_dt,Model=="def",select=-Year)

plot_dt$min <- sapply(1:nrow(plot_dt),function(x)min(subset(survival_rates_dt,Mode==plot_dt[x,"Mode"] & Age==plot_dt[x,"Age"])$Value))
plot_dt$max <- sapply(1:nrow(plot_dt),function(x)max(subset(survival_rates_dt,Mode==plot_dt[x,"Mode"] & Age==plot_dt[x,"Age"])$Value))

ggplot(plot_dt)+
  geom_line(aes(x = Age,y = Value,colour = Mode),
          size = 1.1,
          alpha = 1)+
  geom_ribbon(aes(x=Age,ymin=min,ymax=max,fill=Mode),
              alpha=0.5)+
  labs(y="Cumulative \n Survival rates")+
  scale_y_continuous(limits=c(0,1),expand=c(0,0.01))+
  scale_colour_milovanoff(palette_type = "cat",number_color = 3,name=NULL)+
  scale_fill_milovanoff(palette_type = "cat",number_color = 3,name=NULL)+
  theme_milovanoff(legend_position = "right")

ggsave("outputs/plots/si/survival_rates.png",width=word_width,height=2.5,units=c("in"),dpi=600)
```

##Vehicle registration
```{r vqs_registration, fig.height=3}
registration_dt <- read.csv("inputs/data/new-registration-of-motor-vehicles-under-vehicle-quota-system-vqs.csv",stringsAsFactors = FALSE)

plot_dt <- subset(registration_dt,category!="Vehicles Exempted From VQS")

ggplot(plot_dt)+
  geom_col(aes(x = year,y = number/10000,fill = category))+
  labs(y="New registration (in 10,000)",x=NULL)+
  scale_y_continuous(limits=c(0,NA),expand=c(0,0.01))+
  scale_fill_milovanoff(palette_type = "div",number_color = length(unique(plot_dt$category)),name=NULL)+
  theme_milovanoff(legend_position = "right")

ggsave("outputs/plots/si/vqs_registration.png",width=word_width,height=3,units=c("in"),dpi=600)
```

##Historical vehicle sales
```{r transport_veh_sales,fig.height=2}
res <- read_def_outputs_f(function_tbc="transport_veh_pop_f",scen_tbc="def")
dt <- subset(res[["transport_vint_veh_pop_dt"]],Age==0)
year_tbc <- 2005:2019
transport_modes <- unique(dt$Mode)
car_techno_order <- c("BEV","ICEV-G","ICEV-D","HEV-G","HEV-D","CNG","PHEV")
moto_techno_order <- c("EM","ICEM-G")
bus_techno_order <- c("EB","ICEB-G","ICEB-D","HEB-G","HEB-D","CNGB")
for (mode in transport_modes) {
  plot_dt <- subset(dt,Mode==mode & Year%in%year_tbc)
  #Techno order
  techno_order_name <- switch(mode,
                              `Private car`="car_techno_order",
                              `Taxi`="car_techno_order",
                              Motorcycle = "moto_techno_order",
                              `Public bus` = "bus_techno_order",
                              `Private bus` = "bus_techno_order",
                              `School bus` = "bus_techno_order")
  techno_order <- get(techno_order_name)
  plot_dt$Technology <- factor(plot_dt$Technology, levels=techno_order)
  
  ggplot()+
  geom_col(data=plot_dt,
           aes(x=Year,y=Value/10^3,fill=Technology))+
  facet_wrap(~Mode)+
  scale_fill_milovanoff(palette_type="cat",
                        number_color=length(unique(plot_dt$Technology)),
                        guide=guide_legend(title=NULL))+
  scale_y_continuous(expand = c(0.01,0))+
  scale_x_continuous(expand = c(0.01,0),breaks = c(2005,2010,2015,2019))+
  labs(x=NULL,y="Vehicle sales \n (thousand vehicles)")+
  theme_milovanoff(legend_position = "right")
  #Save
  ggsave(paste0("outputs/plots/si/hist_veh_sale_",mode,".png"),width=word_width,height=2,units=c("in"),dpi=600)
}

```

##Historical vehicle population
```{r transport_veh_pop,fig.height=2}
res <- read_def_outputs_f(function_tbc="transport_veh_pop_f",scen_tbc="def")
dt <- res[["transport_veh_pop_dt"]]
year_tbc <- 2005:2019
transport_modes <- unique(dt$Mode)
car_techno_order <- c("BEV","ICEV-G","ICEV-D","HEV-G","HEV-D","CNG","PHEV")
moto_techno_order <- c("EM","ICEM-G")
bus_techno_order <- c("EB","ICEB-G","ICEB-D","HEB-G","HEB-D","CNGB")
for (mode in transport_modes) {
  plot_dt <- subset(dt,Mode==mode & Year%in%year_tbc)
  #Techno order
  techno_order_name <- switch(mode,
                              `Private car`="car_techno_order",
                              `Taxi`="car_techno_order",
                              Motorcycle = "moto_techno_order",
                              `Public bus` = "bus_techno_order",
                              `Private bus` = "bus_techno_order",
                              `School bus` = "bus_techno_order")
  techno_order <- get(techno_order_name)
  plot_dt$Technology <- factor(plot_dt$Technology, levels=techno_order)
  
  ggplot()+
  geom_col(data=plot_dt,
           aes(x=Year,y=Value/10^3,fill=Technology))+
  facet_wrap(~Mode)+
  scale_fill_milovanoff(palette_type="cat",
                        number_color=length(unique(plot_dt$Technology)),
                        guide=guide_legend(title=NULL))+
  scale_y_continuous(expand = c(0.01,0))+
  scale_x_continuous(expand = c(0.01,0),breaks = c(2005,2010,2015,2019))+
  labs(x=NULL,y="Vehicle population \n (thousand vehicles)")+
  theme_milovanoff(legend_position = "right")
  #Save
  ggsave(paste0("outputs/plots/si/hist_veh_pop_",mode,".png"),width=word_width,height=2,units=c("in"),dpi=600)
}

```

##Example of vintage stock
```{r transport_vint_stock,fig.height=2.5}
res <- read_def_outputs_f(function_tbc="transport_veh_pop_f",scen_tbc="def")
plot_dt <- subset(res[["transport_vint_veh_pop_dt"]],Mode=="Private car" & Year==2019)

car_techno_order <- c("BEV","ICEV-G","ICEV-D","HEV-G","HEV-D","CNG","PHEV")

#Techno order
plot_dt$Technology <- factor(plot_dt$Technology, levels=car_techno_order)

ggplot(data=plot_dt)+
geom_col(aes(x=Age,y=Value/10^3,fill=Technology))+
facet_wrap(~paste(Mode,Year))+
scale_fill_milovanoff(palette_type="cat",
                      number_color=length(unique(plot_dt$Technology)),
                      guide=guide_legend(title=NULL))+
scale_y_continuous(expand = c(0.01,0))+
scale_x_continuous(expand = c(0.01,0))+
labs(x="Age",y="Vehicle population \n (thousand vehicles)")+
theme_milovanoff(legend_position = "right")
#Save
ggsave("outputs/plots/si/vint_stock_car_2019.png",width=word_width,height=2.5,units=c("in"),dpi=600)

```

#Private car

##Private car: Technology
```{r transport_veh_pop,fig.height=4,fig.width=6}
source("model_script_run.R")
modelframework::load_input_data_f()
res <- do.call(transport_veh_pop_f,list())
plot_dt <- subset(res[["transport_veh_pop_dt"]],Mode=="Private car")
ggplot()+
  geom_col(data=plot_dt,
           aes(x=Year,y=Value/10^3,fill=Technology))+
  scale_fill_milovanoff(palette_type="cat",
                        number_color=length(unique(plot_dt$Technology)),
                        guide=guide_legend(title="Technology"))+
  scale_y_continuous(expand = c(0.01,0))+
  scale_x_continuous(expand = c(0.01,0),breaks = seq(2005,2030,5))+
  labs(x=NULL,y="Thousand vehicles")+
  theme_milovanoff(legend_position = "right")

#ggsave("outputs/plots/fuel_type.png",width=6,height=4,units=c("in"),dpi=600)
```


#Fuel use by transport mode
```{r transport_fuel_use,fig.height=6,fig.width=6}
source("model_script_run.R")
modelframework::load_input_data_f()
res <- do.call(transport_fuel_use_f,list())
plot_dt <- res[["transport_fuel_use_dt"]]
ggplot()+
  geom_col(data=plot_dt,
           aes(x=Year,y=Value/10^9,fill=Mode))+
  facet_wrap(~Fuel,ncol=1,scales = "free_y")+
  scale_fill_milovanoff(palette_type="cat",
                        number_color=length(unique(plot_dt$Mode)),
                        guide=guide_legend(title="Tranport mode"))+
  scale_y_continuous(expand = c(0.01,0))+
  scale_x_continuous(expand = c(0.01,0),breaks = seq(2005,2030,5))+
  labs(x=NULL,y="Billion L")+
  theme_milovanoff(legend_position = "right")

#ggsave("outputs/plots/fuel_type.png",width=6,height=4,units=c("in"),dpi=600)

#Calculate total fuel use
tot_dt <- aggregate(formula=Value~Fuel+Year,data=plot_dt,FUN=sum)
```

#GHG emissions of passenger transport - 2005-2018

```{r transport_lca_ghg,fig.height=3,fig.width=6}
modelframework::load_input_data_f()
res <- do.call(transport_lca_ghg_f,list())
plot_dt <- subset(res[["transport_lca_ghg_mode"]],Year%in%2005:2018)
ggplot()+
  geom_col(data=plot_dt,
           aes(x=Year,y=Value/10^9,fill=Mode))+
  scale_fill_milovanoff(palette_type="cat",
                        number_color=length(unique(plot_dt$Mode)),
                        guide=guide_legend(title="Tranport mode"))+
  scale_y_continuous(expand = c(0.01,0))+
  scale_x_continuous(expand = c(0.01,0),breaks = seq(2005,2030,5))+
  labs(x=NULL,y=expression("Mt CO"[2]))+
  theme_milovanoff(legend_position = "right")

ggsave("outputs/plots/ghg_passenger_hist.png",width=6,height=3,units=c("in"),dpi=600)

tot_dt <- aggregate(formula=Value~Year,data=plot_dt,FUN=sum)
```

#Air pollutant emissions of passenger transport - 2005-2018

```{r transport_lca_ghg,fig.height=5,fig.width=6}
modelframework::load_input_data_f()
res <- do.call(transport_on_road_emissions_f,list())
plot_dt <- subset(res[["transport_on_road_emissions"]],Year%in%2005:2018)
ggplot()+
  geom_col(data=plot_dt,
           aes(x=Year,y=Value/10^9,fill=Mode))+
  facet_wrap(~Pollutant,ncol=1,scales = "free_y")+
  scale_fill_milovanoff(palette_type="cat",
                        number_color=length(unique(plot_dt$Mode)),
                        guide=guide_legend(title="Tranport mode"))+
  scale_y_continuous(expand = c(0.01,0))+
  scale_x_continuous(expand = c(0.01,0),breaks = seq(2005,2030,5))+
  labs(x=NULL,y="t")+
  theme_milovanoff(legend_position = "right")

ggsave("outputs/plots/ghg_passenger_hist.png",width=6,height=3,units=c("in"),dpi=600)

tot_dt <- aggregate(formula=Value~Year,data=plot_dt,FUN=sum)
```



#Optimization scenarios

```{r ternary_graph}
res <- read_simulation_f(function_tbc = "transport_lca_ghg_f",sub_function_tbc = "n",dts_name="transport_lca_ghg_tot",scen_tbc = "def",sim_tbc = "sim1",sim_type = "continuous")

#1) Associate the simulations to x, y and z in ternary graphs
#Only consider the simulations with target lower than score target
score_target <- do.call(fun_res_f,list(fun_name="transport_lca_ghg_target_f"))[["score_target"]]
reduction_dt <- subset(res,Year==2030 & Value>=score_target)
#Calculate the percent of reduction of each pathway
score_baseline <- max(reduction_dt$Value)
#Start by calculating the reductions for single pathways (from baseline, to one pathway)
pathway_cols <- grep("variable",colnames(reduction_dt),value=TRUE)
for (pathway in pathway_cols){
  for (case in setdiff(unique(reduction_dt[,pathway]),"0")){
    row_case_baseline <- which(reduction_dt[,pathway]==case & rowSums(sapply(setdiff(pathway_cols,pathway),function(x)reduction_dt[,x]=="0"))==(length(pathway_cols)-1))
    #Calculate the reductions compared to baseline (>0)
    reduction_dt[row_case_baseline,paste0(pathway,"_red")] <- (score_baseline-reduction_dt[row_case_baseline,"Value"])/(score_baseline-score_target)
  }
}
#Then, calculate the reductions for multiple pathways, considering modal_share the first pathway, fuel consumption improvements the second, and technology the third.
pathway = "modal_share_variable"
for (case in setdiff(unique(reduction_dt[,pathway]),"0")){
  row_case_baseline <- which(reduction_dt[,pathway]==case & rowSums(sapply(setdiff(pathway_cols,pathway),function(x)reduction_dt[,x]=="0"))==(length(pathway_cols)-1))
  #Calculate the reductions of additional pathways compared to the case
  for (add_pathway in setdiff(pathway_cols,pathway)){
    for (add_case in unique(reduction_dt[reduction_dt[,pathway]==case,add_pathway])){
      #Obtain row number of the case
      row_case <- which(reduction_dt[,pathway]==case & reduction_dt[,add_pathway]==add_case & rowSums(sapply(setdiff(pathway_cols,c(pathway,add_pathway)),function(x)reduction_dt[,x]=="0"))==(length(pathway_cols)-2))
      #Calculate reductions for first pathway
      reduction_dt[row_case,paste0(pathway,"_red")] <- (score_baseline-reduction_dt[row_case_baseline,"Value"])/(score_baseline-score_target)
      #Calculate reductions for the second pathway
      reduction_dt[row_case,paste0(add_pathway,"_red")] <- (reduction_dt[row_case_baseline,"Value"]-reduction_dt[row_case,"Value"])/(score_baseline-score_target)
    }
  }
}
#Calculate the reductions for multiple pathways in case of no modal share. FC is the pathway
pathway = "fc_variable"
for (case in setdiff(unique(reduction_dt[,pathway]),"0")){
  row_case_baseline <- which(reduction_dt[,pathway]==case & rowSums(sapply(setdiff(pathway_cols,pathway),function(x)reduction_dt[,x]=="0"))==(length(pathway_cols)-1))
  #Calculate the reductions of additional pathways compared to the case
  add_pathway="techno_variable"
  for (add_case in unique(reduction_dt[reduction_dt[,pathway]==case & reduction_dt[,"modal_share_variable"]=="0",add_pathway])){
    #Obtain row number of the case
    row_case <- which(reduction_dt[,"modal_share_variable"]=="0" & reduction_dt[,pathway]==case & reduction_dt[,add_pathway]==add_case )
    #Calculate reductions for first pathway
    reduction_dt[row_case,paste0(pathway,"_red")] <- (score_baseline-reduction_dt[row_case_baseline,"Value"])/(score_baseline-score_target)
    #Calculate reductions for the second pathway
    reduction_dt[row_case,paste0(add_pathway,"_red")] <- (reduction_dt[row_case_baseline,"Value"]-reduction_dt[row_case,"Value"])/(score_baseline-score_target)
  }
}
#Format
#Delete value and unit
reduction_dt <- subset(reduction_dt,techno_variable==0 | fc_variable==0 | modal_share_variable==0,select=-c(Unit,Value))
#force all NAs to 0
reduction_dt[is.na(reduction_dt)] <- 0

#2) Create the plot dataframe
dt_col <- c("PT","EV","FC","Value")
plot_dt <- setNames(data.frame(matrix(0,ncol = length(dt_col), nrow = 0),stringsAsFactors = FALSE,check.names = FALSE),dt_col)


#3) Get air pollutant emission results
#First case: Optimization on technology
for (optimized_variable in c("techno_variable","fc_variable","modal_share_variable")){
  scen_tbc <- switch(optimized_variable,
                     techno_variable="optimization_technology",
                     fc_variable="optimization_fc",
                     modal_share_variable="optimization_modal_share")
  sim_tbc <- switch(optimized_variable,
                     techno_variable="sim2",
                     fc_variable="sim3",
                     modal_share_variable="sim4")
  #
  res_emission <- read_simulation_f(function_tbc = "optimization_pathway_f",sub_function_tbc = "transport_on_road_emissions_f",dts_name="transport_on_road_emissions_tot",scen_tbc = scen_tbc,sim_tbc = sim_tbc,sim_type = "continuous")
  #
  value_dt <- subset(res_emission,Year==2030 & Pollutant=="PM")
  #
  for (i in 1:nrow(value_dt)){
  #Check if case is valide
  if (any(rowSums(sapply(setdiff(pathway_cols,optimized_variable),function(x)reduction_dt[,x]==value_dt[i,x]))==2)){
    #Get the row
    row_reduction <- which(rowSums(sapply(setdiff(pathway_cols,optimized_variable),function(x)reduction_dt[,x]==value_dt[i,x]))==2 & reduction_dt[,optimized_variable]=="0")
    #Add data to plot
    if (optimized_variable=="techno_variable"){
      tmp_dt <- data.frame(PT=reduction_dt[row_reduction,"modal_share_variable_red"],FC=reduction_dt[row_reduction,"fc_variable_red"],EV=1-sum(reduction_dt[row_reduction,c("modal_share_variable_red","fc_variable_red")]),Value=value_dt[i,"Value"])
    } else if (optimized_variable=="fc_variable"){
      tmp_dt <- data.frame(PT=reduction_dt[row_reduction,"modal_share_variable_red"],EV=reduction_dt[row_reduction,"techno_variable_red"],FC=1-sum(reduction_dt[row_reduction,c("modal_share_variable_red","techno_variable_red")]),Value=value_dt[i,"Value"])
    } else if (optimized_variable=="modal_share_variable"){
      tmp_dt <- data.frame(FC=reduction_dt[row_reduction,"fc_variable_red"],EV=reduction_dt[row_reduction,"techno_variable_red"],PT=1-sum(reduction_dt[row_reduction,c("fc_variable_red","techno_variable_red")]),Value=value_dt[i,"Value"])
    }
    #
    plot_dt <- rbind(plot_dt,tmp_dt)
  }
}

}

#4) Plot
plot_dt$Value <- plot_dt$Value/10^6

library(ggtern)
library(ggplot2)
#Base Plot
ggtern(data=plot_dt,aes(PT,FC,EV,value=Value))+
  geom_point()

ggtern(plot_dt,aes(PT,FC,EV,value=Value)) + 
  stat_interpolate_tern(geom="polygon",
                        formula=value~x+y,
                        method=lm,n=100,
                        breaks=seq(0,40,by=4),
                        aes(fill=..level..),expand=1)

```

