---
title: "paper3_si_190824"
output: html_document
---

#Setup 

```{r setup, include=FALSE}
fig_num<-0
tab_num<-0
fig_name<-TRUE
tab_name<-TRUE
word_width = 6.5
knitr::opts_chunk$set(
	echo = FALSE,
	fig.keep = "all",
	fig.show = "asis",
	fig.width = word_width,
	message = FALSE,
	warning = FALSE,
	dev='png',
	dpi=300
)
knitr::opts_knit$set(root.dir = '../')
#Width of the available space in the word document

#Own functions

library(ggplot2)
library(ggthemes)
library(scales)
library(RColorBrewer)
library(ggrepel)
library(cowplot)
library(tidyr)

#Defines the themes of the plots
theme_milovanoff <- function(base_size=14,legend_position="bottom",...) {
  theme_tmp <- theme_foundation(base_size=base_size)+
    theme(plot.title = element_text(face = "bold",size = rel(1.2), hjust = 0.5),
          text = element_text(),
          panel.background = element_rect(colour = NA),
          plot.background = element_rect(colour = NA),
          panel.border = element_rect(colour = NA),
          axis.title = element_text(face = "bold",size = rel(1)),
          axis.title.y = element_text(angle=90,vjust = 0.5),
          axis.title.x = element_text(vjust = 0.5),
          axis.text = element_text(), 
          axis.line = element_line(colour="black"),
          axis.ticks = element_line(),
          panel.grid.major = element_line(colour="#f0f0f0"),
          panel.grid.minor = element_blank(),
          legend.key = element_rect(colour = NA),
          legend.key.height = unit(0.3, "cm"),
          legend.key.width = unit(0.3, "cm"),
          legend.margin = margin(t=0.1,r=0.1,b=0.1,l=0.1, "cm"),
          legend.text = element_text(size = rel(0.8)),
          legend.spacing.x = unit(0.1, "cm"),
          legend.spacing.y = unit(0.1, "cm"),
          plot.margin=unit(c(2,4,2,2),"mm"),
          strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),
          strip.text = element_text(face="bold"),
          panel.spacing.x = unit(0.2, "cm"),
          panel.spacing.y =unit(0.2, "cm")
    )
  if (legend_position=="bottom"){
    theme_tmp <- theme_tmp+
      theme(legend.box = "vertical",
            legend.box.just = "top",
            legend.position = "bottom",
            legend.direction = "horizontal",
            legend.title = element_text(face="italic",rel(1.1),hjust=0.5))
  } else if (legend_position=="right"){
    theme_tmp<-theme_tmp+
      theme(legend.box = "vertical",
            legend.box.just = "left",
            legend.position = "right",
            legend.direction = "vertical",
            legend.title = element_text(face="italic",rel(1.1),hjust=0))
  }
  theme_tmp <- theme_tmp + theme(...)
  return(theme_tmp)
}

#Define the colour
#See here: https://betterfigures.org/2015/06/23/picking-a-colour-scale-for-scientific-graphics/
get_color_palette <- function(palette_type,number_color){
  if (palette_type=="seq_blue"){
    #colorblind safe. Limit=9
    color_palette <- brewer.pal(number_color,"Blues")
  } else if (palette_type=="seq_green"){
    #colorblind safe. Limit=9
    color_palette <- brewer.pal(number_color,"Greens")
  } else if (palette_type=="seq_red"){
    #colorblind safe. Limit=9
    color_palette <- brewer.pal(number_color,"YlOrRd")
  } else if(palette_type=="div"){
    #colorblind safe. Limit=11
    color_palette <- brewer.pal(number_color,"RdYlBu")
  } else if(palette_type=="cat"){
    #Not colorblind safe. Limit=8. Dark2 or Set1 work
    color_palette <- brewer.pal(number_color,"Dark2")
  } else if(palette_type=="paired"){
    #Not colorblind safe. Limit=12
    color_palette <- brewer.pal(number_color,"Paired")
  }
  return(color_palette)
}
#Define colour for specific graphs
color_values_mode_long <- c("Private car"="#b30000", "Private hire car"="#fc8d59", "Motorcycle"="#9970ab", "Taxi"="#878787", "Public bus"="#006d2c", "School bus"="#2ca25f", "Private bus"="#66c2a4", "MRT"="#084081", "LRT"="#2b8cbe")


color_values_mode_long <- c("Private car"="#1f78b4", "Private hire car"="#a6cee3", "Motorcycle"="#ff7f00", "Taxi"="#999999", "Public bus"="#33a02c", "School bus"="#b2df8a", "Private bus"="#f7fcb9", "MRT"="#e31a1c", "LRT"="#fb9a99")

#
scale_fill_milovanoff <- function(type=NA,palette_type=NA,number_color=NA,...){
  if (is.na(type)){
    discrete_scale("fill","milovanoff",manual_pal(values = get_color_palette(palette_type=palette_type,number_color=number_color)), ...)
  } else if (type=="mode_complete"){
    discrete_scale("fill","milovanoff",manual_pal(values = color_values_mode_long), ...)
  }
}

#
scale_colour_milovanoff <- function(palette_type,number_color,...){
  discrete_scale("colour","milovanoff",manual_pal(values = get_color_palette(palette_type=palette_type,number_color=number_color)), ...)
}
#Order of categories
order_mode_long = c("Private car", "Private hire car", "Motorcycle", "Taxi", "Public bus", "School bus","Private bus", "MRT", "LRT")


```

#Model run
```{r}
#Model
source("model_script_run.R")
#Load data inputs in environment
modelframework::load_input_data_f()
#Load attribute values in environment
modelframework::load_attribute_value()
```

#Transport Activity

##Historical values

###Load factors

```{r transport_activity_load_factors,fig.height=3}
modelframework::load_input_data_f()
transport <- do.call(transport_activity_f,list())
plot_dt <- transport[["transport_load_factors"]]

table <- subset(plot_dt, Year %in% c(2005, 2010, 2015, 2019)) %>% spread(Year,Value)

write.csv(table, "outputs/plots/si/table_load_factors.csv",row.names = FALSE)
```

###Annual vehicle activity

```{r transport_activity_avkt,fig.height=3}
modelframework::load_input_data_f()
transport <- do.call(transport_activity_f,list())
plot_dt <- transport[["transport_kt_per_veh"]]

table <- subset(plot_dt, Year %in% c(2005, 2010, 2015, 2019)) %>% spread(Year,Value)

write.csv(table, "outputs/plots/si/table_annual_mileage.csv",row.names = FALSE)
```

###VKT
```{r transport_activity_vkt,fig.height=2.5}
modelframework::load_input_data_f()
transport <- do.call(transport_activity_f,list())
plot_dt <- subset(transport[["transport_vkt"]],Year%in%c(2005:2019) & Value!=0)
plot_dt$Mode <- factor(plot_dt$Mode,levels=order_mode_long)
ggplot()+
  geom_col(data=plot_dt,
           aes(x=Year,y=Value/10^6,fill=Mode))+
  scale_fill_milovanoff(type="mode_complete",
                        guide=guide_legend(title="Tranport mode"))+
  scale_y_continuous(expand = c(0.01,0))+
  scale_x_continuous(expand = c(0.01,0),breaks = c(2005,2010,2015,2019))+
  labs(x=NULL,y="Vehicle activity \n (billion vkt)")+
  theme_milovanoff(legend_position = "right")

ggsave("outputs/plots/si/hist_vkt.png",width=word_width,height=2.5,units=c("in"),dpi=600)
pkt_tot_dt <- aggregate(formula=Value~Year,data=plot_dt,FUN=sum)
```

###PKT
```{r transport_activity_pkt,fig.height=2.5}
modelframework::load_input_data_f()
transport <- do.call(transport_activity_f,list())
plot_dt <- subset(transport[["transport_pkt"]],Year%in%c(2005:2019))
plot_dt$Mode <- factor(plot_dt$Mode,levels=order_mode_long)
ggplot()+
  geom_col(data=plot_dt,
           aes(x=Year,y=Value/10^6,fill=Mode))+
  scale_fill_milovanoff(type="mode_complete",
                        guide=guide_legend(title="Tranport mode"))+
  scale_y_continuous(expand = c(0.01,0))+
  scale_x_continuous(expand = c(0.01,0),breaks = c(2005,2010,2015,2019))+
  labs(x=NULL,y="Passenger activity \n (billion pkt)")+
  theme_milovanoff(legend_position = "right")

ggsave("outputs/plots/si/hist_pkt.png",width=word_width,height=2.5,units=c("in"),dpi=600)
pkt_tot_dt <- aggregate(formula=Value~Year,data=plot_dt,FUN=sum)
#Numerical results
sum(subset(plot_dt,Mode%in%c("MRT","LRT","Public bus") & Year%in%c(2012))$Value)/10^6
sum(subset(plot_dt,Mode%in%c("MRT","LRT","Public bus") & Year%in%c(2019))$Value)/10^6
#Share of pkt in 2019 
setNames(lapply(unique(plot_dt$Mode),function(x)subset(plot_dt,Mode==x & Year==2019)$Value/sum(subset(plot_dt,Year==2019)$Value)),unique(plot_dt$Mode))
```


#Fleet stock

##Survival rates

```{r survival_rates,fig.height=2.5}
survival_rates_dt <- read.csv("inputs/model/survival_rate_singapore.csv",stringsAsFactors = FALSE)
#

year_tbc <- 2006:2019
survival_rates_dt <- subset(survival_rates_dt,Year%in%year_tbc)
#Calculate cumulative survival rates
survival_rates_dt$Value <- sapply(1:nrow(survival_rates_dt),function(x)prod(subset(survival_rates_dt,Mode==survival_rates_dt[x,"Mode"] & Year==survival_rates_dt[x,"Year"] & Age<=survival_rates_dt[x,"Age"])$Value))

plot_dt <- subset(survival_rates_dt,Model=="def",select=-Year)

plot_dt$min <- sapply(1:nrow(plot_dt),function(x)min(subset(survival_rates_dt,Mode==plot_dt[x,"Mode"] & Age==plot_dt[x,"Age"])$Value))
plot_dt$max <- sapply(1:nrow(plot_dt),function(x)max(subset(survival_rates_dt,Mode==plot_dt[x,"Mode"] & Age==plot_dt[x,"Age"])$Value))

ggplot(plot_dt)+
  geom_line(aes(x = Age,y = Value,colour = Mode),
          size = 1.1,
          alpha = 1)+
  geom_ribbon(aes(x=Age,ymin=min,ymax=max,fill=Mode),
              alpha=0.5)+
  labs(y="Cumulative \n Survival rates")+
  scale_y_continuous(limits=c(0,1),expand=c(0,0.01))+
  scale_colour_milovanoff(palette_type = "cat",number_color = 3,name=NULL)+
  scale_fill_milovanoff(palette_type = "cat",number_color = 3,name=NULL)+
  theme_milovanoff(legend_position = "right")

ggsave("outputs/plots/si/survival_rates.png",width=word_width,height=2.5,units=c("in"),dpi=600)
```

##Vehicle registration
```{r vqs_registration, fig.height=2.5}
registration_dt <- read.csv("inputs/data/new-registration-of-motor-vehicles-under-vehicle-quota-system-vqs.csv",stringsAsFactors = FALSE)

plot_dt <- subset(registration_dt,category!="Vehicles Exempted From VQS")

ggplot(plot_dt)+
  geom_col(aes(x = year,y = number/10000,fill = category))+
  labs(y="New registrations \n (in 10,000 vehicles)",x=NULL)+
  scale_y_continuous(limits=c(0,NA),expand=c(0,0.01))+
  scale_fill_milovanoff(palette_type = "div",number_color = length(unique(plot_dt$category)),name=NULL)+
  theme_milovanoff(legend_position = "right")

ggsave("outputs/plots/si/vqs_registration.png",width=word_width,height=2.5,units=c("in"),dpi=600)
```

##Historical vehicle sales
```{r transport_veh_sales,fig.height=2}
res <- read_def_outputs_f(function_tbc="transport_veh_pop_f",scen_tbc="def")
dt <- subset(res[["transport_vint_veh_pop_dt"]],Age==0)
year_tbc <- 2005:2019
transport_modes <- unique(dt$Mode)
#Technology order
car_techno_order <- c("ICEV-G","ICEV-D","HEV-G","CNG","PHEV","BEV")
moto_techno_order <- c("ICEM-G","EM")
bus_techno_order <- c("ICEB-D","HEB-D","CNGB","EB")
#Color by technology
color_car <- c("ICEV-G"="#1f78b4","ICEV-D"="#d95f02","HEV-G"="#a6cee3","CNG"="#bebada","PHEV"="#b2df8a","BEV"="#33a02c")
color_moto <- c("ICEM-G"="#1f78b4","EM"="#33a02c")
color_bus <- c("ICEB-D"="#d95f02","HEB-D"="#fdbf6f","CNGB"="#bebada","EB"="#33a02c")

for (mode in transport_modes) {
  plot_dt <- subset(dt,Mode==mode & Year%in%year_tbc)
  #Techno order
  color_value_name <- switch(mode,
                              `Private car`="color_car",
                              `Private hire car`="color_car",
                              `Taxi`="color_car",
                              Motorcycle = "color_moto",
                              `Public bus` = "color_bus",
                              `Private bus` = "color_bus",
                              `School bus` = "color_bus")
  color_values <- get(color_value_name)
  #Color
  techno_order_name <- switch(mode,
                              `Private car`="car_techno_order",
                              `Private hire car`="car_techno_order",
                              `Taxi`="car_techno_order",
                              Motorcycle = "moto_techno_order",
                              `Public bus` = "bus_techno_order",
                              `Private bus` = "bus_techno_order",
                              `School bus` = "bus_techno_order")
  techno_order <- get(techno_order_name)
  plot_dt$Technology <- factor(plot_dt$Technology, levels=techno_order)
  
  ggplot()+
  geom_col(data=plot_dt,
           aes(x=Year,y=Value/10^3,fill=Technology))+
  facet_wrap(~Mode)+
  scale_fill_manual(values=color_values,guide=guide_legend(title=NULL))+
  scale_y_continuous(expand = c(0.01,0))+
  scale_x_continuous(expand = c(0.01,0),breaks = c(2005,2010,2015,2019))+
  labs(x=NULL,y="Vehicle sales \n (thousand vehicles)")+
  theme_milovanoff(legend_position = "right")
  #Save
  ggsave(paste0("outputs/plots/si/hist_veh_sale_",mode,".png"),width=word_width,height=2,units=c("in"),dpi=600)
}

#Numerical values
subset(dt,Mode=="Private car" & Year==2019 & Technology=="HEV-G")$Value/sum(subset(dt,Mode=="Private car" & Year==2019)$Value)
```

##Historical vehicle population
```{r transport_veh_pop,fig.height=2}
res <- read_def_outputs_f(function_tbc="transport_veh_pop_f",scen_tbc="def")
dt <- res[["transport_veh_pop_dt"]]
year_tbc <- 2005:2019
transport_modes <- unique(dt$Mode)
car_techno_order <- c("ICEV-G","ICEV-D","HEV-G","CNG","PHEV","BEV")
moto_techno_order <- c("ICEM-G","EM")
bus_techno_order <- c("ICEB-D","HEB-D","CNGB","EB")
#Color by technology
color_car <- c("ICEV-G"="#1f78b4","ICEV-D"="#d95f02","HEV-G"="#a6cee3","CNG"="#bebada","PHEV"="#b2df8a","BEV"="#33a02c")
color_moto <- c("ICEM-G"="#1f78b4","EM"="#33a02c")
color_bus <- c("ICEB-D"="#d95f02","HEB-D"="#fdbf6f","CNGB"="#bebada","EB"="#33a02c")
for (mode in transport_modes) {
  plot_dt <- subset(dt,Mode==mode & Year%in%year_tbc)
  #Techno order
  techno_order_name <- switch(mode,
                              `Private car`="car_techno_order",
                              `Private hire car`="car_techno_order",
                              `Taxi`="car_techno_order",
                              Motorcycle = "moto_techno_order",
                              `Public bus` = "bus_techno_order",
                              `Private bus` = "bus_techno_order",
                              `School bus` = "bus_techno_order")
  techno_order <- get(techno_order_name)
  #color
  color_value_name <- switch(mode,
                              `Private car`="color_car",
                              `Private hire car`="color_car",
                              `Taxi`="color_car",
                              Motorcycle = "color_moto",
                              `Public bus` = "color_bus",
                              `Private bus` = "color_bus",
                              `School bus` = "color_bus")
  color_values <- get(color_value_name)
  plot_dt$Technology <- factor(plot_dt$Technology, levels=techno_order)
  
  ggplot()+
  geom_col(data=plot_dt,
           aes(x=Year,y=Value/10^3,fill=Technology))+
  facet_wrap(~Mode)+
  scale_fill_manual(values=color_values,guide=guide_legend(title=NULL))+
  scale_y_continuous(expand = c(0.01,0))+
  scale_x_continuous(expand = c(0.01,0),breaks = c(2005,2010,2015,2019))+
  labs(x=NULL,y="Vehicle population \n (thousand vehicles)")+
  theme_milovanoff(legend_position = "right")
  #Save
  ggsave(paste0("outputs/plots/si/hist_veh_pop_",mode,".png"),width=word_width,height=2,units=c("in"),dpi=600)
}

```

##Example of vintage stock
```{r transport_vint_stock,fig.height=2.5}
res <- read_def_outputs_f(function_tbc="transport_veh_pop_f",scen_tbc="def")
plot_dt <- subset(res[["transport_vint_veh_pop_dt"]],Mode=="Private car" & Year==2019)

car_techno_order <- c("ICEV-G","ICEV-D","HEV-G","CNG","PHEV","BEV")
color_car <- c("ICEV-G"="#1f78b4","ICEV-D"="#d95f02","HEV-G"="#a6cee3","CNG"="#bebada","PHEV"="#b2df8a","BEV"="#33a02c")

#Techno order
plot_dt$Technology <- factor(plot_dt$Technology, levels=car_techno_order)

ggplot(data=plot_dt)+
geom_col(aes(x=Age,y=Value/10^3,fill=Technology))+
facet_wrap(~paste(Mode,Year))+
scale_fill_manual(values=color_car,guide=guide_legend(title=NULL))+
scale_y_continuous(expand = c(0.01,0))+
scale_x_continuous(expand = c(0.01,0))+
labs(x="Age",y="Vehicle population \n (thousand vehicles)")+
theme_milovanoff(legend_position = "right")
#Save
ggsave("outputs/plots/si/vint_stock_car_2019.png",width=word_width,height=2.5,units=c("in"),dpi=600)

```

#Vehicle characteristics

##Private and private hire cars

```{r car_on_road_fc, fig.height=2.5}

on_road_fc_icevg <- read.csv("inputs/model/hist_fc_onroad_icevg.csv",stringsAsFactors = FALSE,check.names = FALSE)


plot_dt <- on_road_fc_icevg

ggplot(plot_dt)+
  geom_point(aes(x=Year,y=Car_fuel_use/10^9,colour="ICEV-G Gasoline use"))+
  geom_line(aes(x=Year,y=Car_fuel_use/10^9,colour="ICEV-G Gasoline use"))+
  geom_point(aes(x=Year,y=Car_on_road_fc/6,colour="ICEV-G On-road fuel consumption"))+
  geom_line(aes(x=Year,y=Car_on_road_fc/6,colour="ICEV-G On-road fuel consumption"))+
  labs(x=NULL,y="Gasoline use \n (billion L)")+
  scale_y_continuous(limits=c(0,NA),sec.axis = sec_axis(~.*6,name="Fuel consumption \n (L/100km)"))+
  scale_colour_milovanoff(palette_type="cat",number_color = 2,name=NULL)+
  theme_milovanoff(axis.title.y.right =element_text(angle=90))

ggsave("outputs/plots/si/hist_on_road_fc_icevg.png",width=word_width,height=2.5,units=c("in"),dpi=600)
```


#Historical fuel use by transport mode
```{r transport_fuel_use,fig.height=6}
modelframework::load_input_data_f()
res <- do.call(transport_fuel_use_f,list())
year_tbc <- 2005:2019

plot_dt <- subset(res[["transport_fuel_use_dt"]],Year%in%year_tbc)
plot_dt$Mode <- factor(plot_dt$Mode,levels=order_mode_long)
ggplot()+
  geom_col(data=plot_dt,
           aes(x=Year,y=Value/10^9,fill=Mode))+
  facet_wrap(~Fuel,ncol=1,scales = "free_y")+
  scale_fill_milovanoff(type="mode_complete",
                        guide=guide_legend(title="Tranport mode"))+
  scale_y_continuous(expand = c(0.01,0))+
  scale_x_continuous(expand = c(0.01,0),breaks = seq(2005,2030,5))+
  labs(x=NULL,y="Passenger transport fuel use (Billion L or kWh)")+
  theme_milovanoff(legend_position = "right")

ggsave("outputs/plots/si/hist_fuel_se.png",width=6.5,height=6,units=c("in"),dpi=600)

#Calculate total fuel use
tot_dt <- aggregate(formula=Value~Fuel+Year,data=plot_dt,FUN=sum)
```

#GHG emission budget for Singapore

```{r singapore_carbon_emission_pathways, fig.height=2.5,fig.width=4}
budget_dt <- read.csv("inputs/model/singapore_carbon_budget.csv",stringsAsFactors = FALSE, check.names = FALSE)
plot_dt <- budget_dt
#Consider historical emissions
plot_dt <- subset(plot_dt,(Year%in%2005:2017 & Scenario=="INDC")|Year>2017)

plot_dt[plot_dt$Year%in%2005:2017,c("Convergence_year","Scenario","Target")] <- "Historical"
plot_dt[grepl("-19",plot_dt$Scenario),"Target"] <- "1.5C"
plot_dt[grepl("-26",plot_dt$Scenario),"Target"] <- "2C"
plot_dt[is.na(plot_dt)] <- "INDC"
plot_dt$Target <- factor(plot_dt$Target,levels=c("Historical","INDC","2C","1.5C"))

plot_dt$Scenario <- sapply(plot_dt$Scenario,function(x)substring(x,0,as.numeric(regexpr(pattern="-",x))-1))

plot_ribbon <- aggregate(formula = Value~Target+Year,data =plot_dt,FUN=mean)
plot_ribbon$start <- sapply(1:nrow(plot_ribbon),function(x)min(subset(plot_dt,Year==plot_ribbon[x,"Year"] & Target==plot_ribbon[x,"Target"])$Value))
plot_ribbon$end <- sapply(1:nrow(plot_ribbon),function(x)max(subset(plot_dt,Year==plot_ribbon[x,"Year"] & Target==plot_ribbon[x,"Target"])$Value))



ggplot()+
  geom_ribbon(data=subset(plot_ribbon,Target%in%c("1.5C","2C")),
            aes(x=Year,ymin=start,ymax=end,fill=Target),
            alpha=0.25)+
  geom_line(data=plot_ribbon,
            aes(x=Year,y=Value,colour=Target),
            size=1.2)+
  scale_colour_manual(values=c(Historical="black",INDC="#1B9E77",`1.5C`="#D95F02",`2C`="#7570B3"),name=NULL)+
  scale_fill_manual(values=c(`1.5C`="#D95F02",`2C`="#7570B3"),guide=NULL)+
  scale_linetype_manual(values=c(Historical=1,INDC=1,`2030`=2,`2040`=3), guide = guide_legend(title="Convergence year"),breaks=c("2030","2040"))+
  scale_x_continuous(expand=c(0,0))+
  labs(y=expression("Mt CO"[2]),x=NULL)+
  theme_milovanoff()+
  theme(legend.box = "vertical",
        legend.key.width=unit(1,"cm"))

ggsave("outputs/plots/si/carbon_budget_national.png",width=4,height=2.5,units=c("in"),dpi=600)


```


```{r singapore_cum_carbon_budget, fig.height=2.5, fig.width=2}
#CALCULATE CHUNK BEFORE
tot_budget_dt <- aggregate(formula = Value~Target+Scenario+Convergence_year+Model,data = subset(plot_dt,Scenario!="INDC" & Model!="INDC"),FUN=sum)

ggplot()+
  geom_boxplot(data = tot_budget_dt,aes(x=Target,y=Value,colour=Target))+
  scale_colour_manual(values=c(`1.5C`="#D95F02",`2C`="#7570B3"), guide = "none")+
  scale_y_continuous(limits=c(0,NA))+
  labs(y=expression("Mt CO"[2]),x=NULL)+
  theme_milovanoff(legend.direction = "vertical",
                   legend.title = element_text(face="italic",size=12,hjust=0),
                   legend.text = element_text(size=11,hjust=0),
                   legend.box.margin = margin(t=-0.5,unit="cm"))

ggsave("outputs/plots/si/carbon_budget_national_cum.png",width=2,height=2.5,units=c("in"),dpi=600)

#Count
sum(tot_budget_dt$Target=="1.5C")
sum(tot_budget_dt$Target=="2C")
```

```{r singapore_cum_carbon_budget, fig.height=2.5, fig.width=6}
#CALCULATE CHUNK BEFORE
tot_budget_dt <- aggregate(formula = Value~Target+Scenario+Convergence_year+Model,data = subset(plot_dt,Scenario!="INDC" & Model!="INDC"),FUN=sum)

#Understand the variability accross the parameters

ggplot()+
  geom_density(data = tot_budget_dt,aes(y=Value),
               fill="grey50",
               alpha=0.75)+
  geom_hline(data = aggregate(formula = Value~Target,data=tot_budget_dt, FUN=mean),
             aes(yintercept=Value,linetype="Mean"),
                 size=1.2)+
  facet_wrap(~Target)+
  labs(y=expression("Mt CO"[2]),x=NULL)+
  scale_y_continuous(limits=c(0,1200),expand = c(0,0))+
  scale_linetype_manual(values=c(Mean=2),guide=guide_legend(title=NULL))+
  theme_milovanoff(legend.key.width = unit(1.3, "cm"),
                   legend_position="bottom",
                   panel.spacing.x = unit(1, "cm"),
                   axis.text.x = element_blank(),
                   axis.ticks.x = element_blank())

ggsave("outputs/plots/si/carbon_budget_national_cum_dens.png",width=6,height=2.5,units=c("in"),dpi=600)


ggplot()+
  geom_density(data = tot_budget_dt,aes(y=Value,fill=Scenario),
               alpha=0.75)+
  facet_wrap(~Target)+
  labs(y=expression("Mt CO"[2]),x=NULL)+
  scale_y_continuous(limits=c(0,1200),expand = c(0,0))+
  scale_fill_milovanoff(palette_type = "div",number_color = length(unique(tot_budget_dt$Scenario)),guide=guide_legend(title="SSPs"))+
  theme_milovanoff(legend_position="bottom",
                   panel.spacing.x = unit(1, "cm"),
                   axis.text.x = element_blank(),
                   axis.ticks.x = element_blank())

ggsave("outputs/plots/si/carbon_budget_national_cum_scen.png",width=6,height=2.5,units=c("in"),dpi=600)

ggplot()+
  geom_density(data = tot_budget_dt,aes(y=Value,fill=Model),
               alpha=0.75)+
  facet_wrap(~Target)+
  labs(y=expression("Mt CO"[2]),x=NULL)+
  scale_y_continuous(limits=c(0,1200),expand = c(0,0))+
  scale_fill_milovanoff(palette_type = "div",number_color = length(unique(tot_budget_dt$Model)),guide=guide_legend(title="Model"))+
  theme_milovanoff(legend_position="bottom",
                   panel.spacing.x = unit(1, "cm"),
                   axis.text.x = element_blank(),
                   axis.ticks.x = element_blank())

ggsave("outputs/plots/si/carbon_budget_national_cum_model.png",width=6,height=2.5,units=c("in"),dpi=600)

ggplot()+
  geom_density(data = tot_budget_dt,aes(y=Value,fill=Convergence_year),
               alpha=0.75)+
  facet_wrap(~Target)+
  labs(y=expression("Mt CO"[2]),x=NULL)+
  scale_y_continuous(limits=c(0,1200),expand = c(0,0))+
  scale_fill_milovanoff(palette_type = "div",number_color = length(unique(tot_budget_dt$Convergence_year)),guide=guide_legend(title="Convergence year"))+
  theme_milovanoff(legend_position="bottom",
                   panel.spacing.x = unit(1, "cm"),
                   axis.text.x = element_blank(),
                   axis.ticks.x = element_blank())

ggsave("outputs/plots/si/carbon_budget_national_cum_conv_year.png",width=6,height=2.5,units=c("in"),dpi=600)

```

#Prospective scenarios

##Population and motorized passenger activity
```{r prospective_pkt, fig.height=3}
modelframework::load_input_data_f()
transport <- do.call(transport_activity_f,list())
transport_pkt <- aggregate(formula=Value~Year+Unit,data=subset(transport[["transport_pkt"]]),FUN=sum)

pop_dt <- subset(get_input_f("population"),Scenario =="Medium" & Year<=2050)

transport_pkt$Transport_intensity <- sapply(1:nrow(transport_pkt),function(x)transport_pkt[x,"Value"]/subset(pop_dt,Year==transport_pkt[x,"Year"])$Value)

#Linear regression
mat_tot_pkt <- subset(transport_pkt) %>%
  acast(data=., Unit ~ Year , value.var='Value',fun.aggregate=sum, margins=FALSE)
#Create matrix of population
mat_pop <- subset(pop_dt,Scenario=="Medium" & Year <= 2050) %>%
  acast(data=., Country ~ Year , value.var='Value',fun.aggregate=sum, margins=FALSE)
#Calculate linear regression
lin_reg <- lm(mat_tot_pkt[,as.character(2005:2019)]~mat_pop[,as.character(2005:2019)])

#Calculate the PKT/person


ggplot()+
  geom_line(data=transport_pkt,
           aes(x=Year,y=Value/10^7,colour="Passenger activity",linetype=ifelse(Year<2020,"Historical","Projeted")),
           size=1.1)+
  geom_line(data=pop_dt,
            aes(x=Year,y=Value/(10^6),colour="Population",linetype=ifelse(Year<2020,"Historical","Projeted")),
            size=1.1)+
  geom_line(data=transport_pkt,
            aes(x=Year,y=Transport_intensity/2.5,colour="Transport intensity",linetype=ifelse(Year<2020,"Historical","Projeted")),
            size=1.1)+
  scale_y_continuous(limits=c(3,NA),expand = c(0.01,0),sec.axis = sec_axis(~.*2.5,name="Transport Intensity \n (x1,000pkt/person)"))+
  scale_x_continuous(expand = c(0.01,0),breaks = seq(2005,2050,5))+
  scale_colour_milovanoff(palette_type = "cat",number_color = 2,name=NULL)+
  scale_linetype(name=NULL)+
  labs(x=NULL,y="Passenger activity \n (x10 billion pkt) \n Population \n (million)")+
  theme_milovanoff(legend_position = "bottom",
                   axis.title.y.right =element_text(angle=90,hjust=0.6),
                   axis.title.y.left =element_text(hjust=0.5),
                   legend.key.width=unit(0.5,"cm"),
                   legend.box = "vertical")

ggsave("outputs/plots/si/hist_proj_pkt_pop.png",width=word_width,height=3,units=c("in"),dpi=600)
```

##Modal share

###Private car ubiquity
```{r transport_activity_pc,fig.height=2.5,fig.width=3}
res <- read_def_outputs_f(function_tbc="transport_activity_f",scen_tbc="scen1")
#Plot vkt
plot_dt <- subset(res[["transport_vkt"]],Year%in%c(2019:2050) & Scenario=="PC_Constant")
plot_dt$Mode <- factor(plot_dt$Mode,levels=order_mode_long)

plot <- ggplot()+
  geom_col(data=plot_dt,
           aes(x=Year,y=Value/10^6,fill=Mode))+
  scale_fill_milovanoff(type="mode_complete",guide=guide_legend(title=NULL))+
  scale_y_continuous(expand = c(0.01,0))+
  scale_x_continuous(expand = c(0.01,0),breaks = seq(2020,2050,10))+
  labs(x=NULL,y="Vehicle activity \n (billion vkt)")+
  theme_milovanoff(legend_position = "bottom")
plot+theme(legend.position = "none")
ggsave("outputs/plots/si/pros_vkt_pc.png",plot+theme(legend.position = "none"),width=3,height=2.5,units=c("in"),dpi=600)
#Plot pkt
plot_dt <- subset(res[["transport_pkt"]],Year%in%c(2019:2050) & Scenario=="PC_Constant")
plot_dt$Mode <- factor(plot_dt$Mode,levels=order_mode_long)
plot <- ggplot()+
  geom_col(data=plot_dt,
           aes(x=Year,y=Value/10^6,fill=Mode))+
  scale_fill_milovanoff(type="mode_complete",guide=guide_legend(title=NULL))+
  scale_y_continuous(expand = c(0.01,0))+
  scale_x_continuous(expand = c(0.01,0),breaks = seq(2020,2050,10))+
  labs(x=NULL,y="Passenger activity \n (billion pkt)")+
  theme_milovanoff(legend_position = "bottom")
plot+theme(legend.position = "none")
ggsave("outputs/plots/si/pros_pkt_pc.png",plot+theme(legend.position = "none"),width=3,height=2.5,units=c("in"),dpi=600)
#Plot legend
plot_legend_colour <- get_legend(plot)
ggsave(paste0("outputs/plots/si/pros_pkt_pc_leg.png"),plot=plot_legend_colour,width=6,height=0.3,units=c("in"),dpi=600)
```

```{r transport_stock_pc,fig.height=2.5,fig.width=3}
res <- read_def_outputs_f(function_tbc="transport_veh_pop_f",scen_tbc="scen1")

#Vehicle sales
plot_dt <- subset(res[["transport_vint_veh_pop_dt"]],Year%in%c(2019:2050) & Scenario=="PC_Constant" & Age==0) %>%   aggregate(formula=Value~Year+Mode,data=.,FUN=sum)
plot_dt$Mode <- factor(plot_dt$Mode,levels=order_mode_long)

plot <- ggplot(data=plot_dt)+
  geom_col(aes(x=Year,y=Value/10^3,fill=Mode))+
  scale_fill_milovanoff(type="mode_complete",guide=guide_legend(title=NULL))+
  scale_y_continuous(expand = c(0.01,0))+
  scale_x_continuous(expand = c(0.01,0),breaks = seq(2020,2050,10))+
  labs(x=NULL,y="Vehicle sales \n (thousand vehicles)")+
  theme_milovanoff(legend_position = "right")
plot+theme(legend.position="none")
ggsave("outputs/plots/si/pros_sales_pc.png",plot+theme(legend.position = "none"),width=3,height=2.5,units=c("in"),dpi=600)

#Vehicle stock
plot_dt <- subset(res[["transport_veh_pop_dt"]],Year%in%c(2019:2050) & Scenario=="PC_Constant") %>% aggregate(formula=Value~Year+Mode,data=.,FUN=sum)
plot_dt$Mode <- factor(plot_dt$Mode,levels=order_mode_long)
plot <- ggplot(data=plot_dt)+
  geom_col(aes(x=Year,y=Value/10^3,fill=Mode))+
  scale_fill_milovanoff(type="mode_complete",guide=guide_legend(title=NULL))+
  scale_y_continuous(expand = c(0.01,0))+
  scale_x_continuous(expand = c(0.01,0),breaks = seq(2020,2050,10))+
  labs(x=NULL,y="Vehicle population \n (thousand vehicles)")+
  theme_milovanoff(legend_position = "bottom")
plot+theme(legend.position="none")
ggsave("outputs/plots/si/pros_stock_pc.png",plot+theme(legend.position = "none"),width=3,height=2.5,units=c("in"),dpi=600)
#Plot legend
plot_legend_colour <- get_legend(plot)
ggsave(paste0("outputs/plots/si/pros_stock_pc_leg.png"),plot=plot_legend_colour,width=6,height=0.3,units=c("in"),dpi=600)
#Numerical values
setNames(lapply(2020:2050,function(x)sum(subset(plot_dt,Year==x & Mode%in%c("Private car","Private hire car"))$Value)),2020:2050)

```

### Public Transit development
```{r transport_activity_pt,fig.height=2.5,fig.width=3}
res <- read_def_outputs_f(function_tbc="transport_activity_f",scen_tbc="scen1")
#Plot vkt
plot_dt <- subset(res[["transport_vkt"]],Year%in%c(2019:2050) & Scenario=="PT_Constant")
plot_dt$Mode <- factor(plot_dt$Mode,levels=order_mode_long)

plot <- ggplot()+
  geom_col(data=plot_dt,
           aes(x=Year,y=Value/10^6,fill=Mode))+
  scale_fill_milovanoff(type="mode_complete",guide=guide_legend(title=NULL))+
  scale_y_continuous(expand = c(0.01,0))+
  scale_x_continuous(expand = c(0.01,0),breaks = seq(2020,2050,10))+
  labs(x=NULL,y="Vehicle activity \n (billion vkt)")+
  theme_milovanoff(legend_position = "bottom")
plot+theme(legend.position = "none")
ggsave("outputs/plots/si/pros_vkt_pt.png",plot+theme(legend.position = "none"),width=3,height=2.5,units=c("in"),dpi=600)
#Plot pkt
plot_dt <- subset(res[["transport_pkt"]],Year%in%c(2019:2050) & Scenario=="PT_Constant")
plot_dt$Mode <- factor(plot_dt$Mode,levels=order_mode_long)
plot <- ggplot()+
  geom_col(data=plot_dt,
           aes(x=Year,y=Value/10^6,fill=Mode))+
  scale_fill_milovanoff(type="mode_complete",guide=guide_legend(title=NULL))+
  scale_y_continuous(expand = c(0.01,0))+
  scale_x_continuous(expand = c(0.01,0),breaks = seq(2020,2050,10))+
  labs(x=NULL,y="Passenger activity \n (billion pkt)")+
  theme_milovanoff(legend_position = "bottom")
plot+theme(legend.position = "none")
ggsave("outputs/plots/si/pros_pkt_pt.png",plot+theme(legend.position = "none"),width=3,height=2.5,units=c("in"),dpi=600)
#Plot legend
plot_legend_colour <- get_legend(plot)
ggsave(paste0("outputs/plots/si/pros_pkt_pt_leg.png"),plot=plot_legend_colour,width=6,height=0.3,units=c("in"),dpi=600)

```

```{r transport_stock_pt,fig.height=2.5,fig.width=3}
res <- read_def_outputs_f(function_tbc="transport_veh_pop_f",scen_tbc="scen1")

#Vehicle sales
plot_dt <- subset(res[["transport_vint_veh_pop_dt"]],Year%in%c(2019:2050) & Scenario=="PT_Constant" & Age==0) %>%   aggregate(formula=Value~Year+Mode,data=.,FUN=sum)
plot_dt$Mode <- factor(plot_dt$Mode,levels=order_mode_long)

plot <- ggplot(data=plot_dt)+
  geom_col(aes(x=Year,y=Value/10^3,fill=Mode))+
  scale_fill_milovanoff(type="mode_complete",guide=guide_legend(title=NULL))+
  scale_y_continuous(expand = c(0.01,0))+
  scale_x_continuous(expand = c(0.01,0),breaks = seq(2020,2050,10))+
  labs(x=NULL,y="Vehicle sales \n (thousand vehicles)")+
  theme_milovanoff(legend_position = "right")
plot+theme(legend.position="none")
ggsave("outputs/plots/si/pros_sales_pt.png",plot+theme(legend.position = "none"),width=3,height=2.5,units=c("in"),dpi=600)

#Vehicle stock
plot_dt <- subset(res[["transport_veh_pop_dt"]],Year%in%c(2019:2050) & Scenario=="PT_Constant") %>% aggregate(formula=Value~Year+Mode,data=.,FUN=sum)
plot_dt$Mode <- factor(plot_dt$Mode,levels=order_mode_long)
plot <- ggplot(data=plot_dt)+
  geom_col(aes(x=Year,y=Value/10^3,fill=Mode))+
  scale_fill_milovanoff(type="mode_complete",guide=guide_legend(title=NULL))+
  scale_y_continuous(expand = c(0.01,0))+
  scale_x_continuous(expand = c(0.01,0),breaks = seq(2020,2050,10))+
  labs(x=NULL,y="Vehicle population \n (thousand vehicles)")+
  theme_milovanoff(legend_position = "bottom")
plot+theme(legend.position="none")
ggsave("outputs/plots/si/pros_stock_pt.png",plot+theme(legend.position = "none"),width=3,height=2.5,units=c("in"),dpi=600)
#Plot legend
plot_legend_colour <- get_legend(plot)
ggsave(paste0("outputs/plots/si/pros_stock_pt_leg.png"),plot=plot_legend_colour,width=6,height=0.3,units=c("in"),dpi=600)
setNames(lapply(2020:2050,function(x)sum(subset(plot_dt,Year==x & Mode%in%c("Private car","Private hire car"))$Value)),2020:2050)
```


##Vehicle technologies

```{r transport_stock_ev,fig.height=5, fig.width=6}
res <- read_def_outputs_f(function_tbc="transport_veh_pop_f",scen_tbc="scen1")
scen_tbc <- c("PC_EV","PT_EV")
mode_tbc <- c("Taxi","Public bus","Private car", "Private hire car")
years_tbc <- c(2020:2050)
plot_dt <- subset(res[["transport_veh_pop_dt"]],Scenario%in%scen_tbc & Mode%in%mode_tbc & Year%in%years_tbc)

#Rename vehicle technologies
plot_dt$Mode <- as.character(plot_dt$Mode)
plot_dt$Mode <- rename_values(plot_dt$Mode,list("Private car"="Private hire car"))
plot_dt$Technology <- rename_values(plot_dt$Technology,list("ICEV/B-G"=c("ICEV-G","ICEB-G"),"ICEV/B-D"=c("ICEV-D","ICEB-D"),"HEV/B-G"=c("HEV-G","HEB-G"),"HEV/B-D"=c("HEV-D","HEB-D"),"CNGV/B"=c("CNG","CNGB"),"EV/B"=c("EB","BEV")))
plot_dt$Scenario <- rename_values(plot_dt$Scenario,list("Private Car ubiquity"="PC_EV","Public Transit"="PT_EV"))
#Color by technology
color_list <- c("ICEV/B-G"="#1f78b4","ICEV/B-D"="#d95f02","HEV/B-G"="#a6cee3","HEV/B-D"="#fdbf6f","CNGV/B"="#bebada","PHEV"="#b2df8a","EV/B"="#33a02c")
techno_order = c("ICEV/B-G","ICEV/B-D","HEV/B-G","HEV/B-D","PHEV","EV/B","CNGV/B")
plot_dt$Technology <- factor(plot_dt$Technology,levels = techno_order)
ggplot(data=plot_dt)+
      geom_col(aes(x=Year,y=Value/10^3,fill=Technology))+
      facet_grid(Mode~Scenario,scale="free")+
      scale_fill_manual(values=color_list,name=NULL,guide = guide_legend(nrow=1))+
      scale_y_continuous(expand = c(0.01,0))+
      scale_x_continuous(expand = c(0.01,0))+
      labs(x=NULL,y="Vehicle population (thousand vehicles)")+
      theme_milovanoff(axis.text.x = element_text(face=,size=, angle=40,vjust=1,hjust=1),
                       panel.spacing.x = unit(0.5,"cm"))

ggsave(paste0("outputs/plots/si/proj_stock_techno_PC_PT.png"),width=6,height=5,units=c("in"),dpi=600)


#Calculate numerical values
#Cumulative production of EVs, EB
dt <- subset(res[["transport_vint_veh_pop_dt"]],Year%in%years_tbc & Technology%in%c("BEV","EB","EM") & Age==0) %>%
  aggregate(formula = Value~Technology+Year++Scenario,data = .,FUN=sum) %>%
  cum_long_dtf_f(.) %>%
  subset(.,Year==2050)
  


```


#GHG emissions of vehicles

#GHG emissions of passenger transport - 2005-2019
```{r vehicle_ghg_vkt,fig.height=3,fig.width=7}
modelframework::load_input_data_f()
res <- do.call(vehicle_lca_ghg_f,list())

mode_tbc <- c("Private car","Public bus","Motorcycle", "MRT")
plot_dt <- subset(res[["vehicle_lca_vkt"]],Mode%in%mode_tbc)

ggplot(plot_dt)+
  geom_col(aes(x=Technology,y=Value,fill=Phase))+
  facet_grid(~Mode,scales = "free", space = "free_x")+
  labs(x=NULL,y=expression("kg CO"[2]*"eq./vkt"))+
  scale_fill_milovanoff(palette_type="cat",number_color=length(unique(plot_dt$Phase)),name=NULL)+
  theme_milovanoff(axis.text.x = element_text(face=,size=, angle=40,vjust=1,hjust=1))

ggsave("outputs/plots/si/lca_vehicle_vkt.png",width=7,height=3,units=c("in"),dpi=600)

tot_dt <- aggregate(formula=Value~Mode+Technology,data=plot_dt,FUN=sum)
```

```{r vehicle_ghg_pkt,fig.height=3,fig.width=7}
modelframework::load_input_data_f()
res <- do.call(vehicle_lca_ghg_f,list())

mode_tbc <- c("Private car","Public bus","Motorcycle")
plot_dt <- subset(res[["vehicle_lca_pkt"]],Mode%in%mode_tbc)

ggplot(plot_dt)+
  geom_col(aes(x=Technology,y=Value,fill=Phase))+
  facet_grid(~Mode,scales = "free", space = "free_x")+
  labs(x=NULL,y=expression("kg CO"[2]*"eq./pkt"))+
  scale_fill_milovanoff(palette_type="cat",number_color=length(unique(plot_dt$Phase)),name=NULL)+
  theme_milovanoff(axis.text.x = element_text(face=,size=, angle=40,vjust=1,hjust=1))

ggsave("outputs/plots/si/lca_vehicle_pkt.png",width=7,height=3,units=c("in"),dpi=600)

tot_dt <- aggregate(formula=Value~Mode+Technology,data=plot_dt,FUN=sum)
```

##GHG emissions by phase
```{r transport_lca_ghg_phase,fig.height=2.5}
modelframework::load_input_data_f()
res <- do.call(transport_lca_ghg_f,list())
dt <- subset(res[["transport_lca_ghg_process"]],Year%in%2005:2019)
car_order <- c("Gasoline","Diesel","Electricity","CNG","Battery production","Vehicle production, without battery")
moto_order <- c("Gasoline","Diesel","Electricity","CNG","Battery production","Motorcycle production, without battery")
bus_order <- c("Gasoline","Diesel","Electricity","CNG","Battery production","Bus production, without battery")
rt_order <- c("Gasoline","Diesel","Electricity","CNG","Battery production")
for (mode in unique(dt$Mode)){
  #Techno order
  order_name <- switch(mode,
                              `Private car`="car_order",
                              `Private hire car`="car_order",
                              `Taxi`="car_order",
                              Motorcycle = "moto_order",
                              `Public bus` = "bus_order",
                              `Private bus` = "bus_order",
                              `School bus` = "bus_order",
                              `MRT`= "rt_order",
                              `LRT` = "rt_order")
  order <- get(order_name)
  plot_dt <- subset(dt,Mode==mode)
  plot_dt$Process <- factor(plot_dt$Process, levels=order)
  ggplot()+
  geom_col(data=plot_dt,
           aes(x=Year,y=Value/10^9,fill=Process))+
  facet_wrap(~Mode)+
  scale_fill_milovanoff(palette_type="div",
                        number_color=6,
                        guide=guide_legend(title=NULL))+
  scale_y_continuous(expand = c(0.01,0))+
  scale_x_continuous(expand = c(0.01,0),breaks = c(2005,2010,2015,2019))+
  labs(x=NULL,y=expression("Mt CO"[2]))+
  theme_milovanoff(legend_position = "bottom")

ggsave(paste0("outputs/plots/si/hist_ghg_",mode,".png"),width=6.5,height=2.5,units=c("in"),dpi=600)
}


tot_dt <- aggregate(formula=Value~Year,data=plot_dt,FUN=sum)
```

##GHG emissions by mode

```{r transport_lca_ghg,fig.height=3,fig.width=6}
modelframework::load_input_data_f()
res <- do.call(transport_lca_ghg_f,list())
plot_dt <- subset(res[["transport_lca_ghg_mode"]],Year%in%2005:2019)
plot_dt$Mode <- factor(plot_dt$Mode,levels=order_mode_long)
ggplot()+
  geom_col(data=plot_dt,
           aes(x=Year,y=Value/10^9,fill=Mode))+
  scale_fill_milovanoff(type="mode_complete",
                        guide=guide_legend(title="Tranport mode"))+
  scale_y_continuous(expand = c(0.01,0))+
  scale_x_continuous(expand = c(0.01,0),breaks = c(2005,2010,2015,2019))+
  labs(x=NULL,y=expression(atop("Passenger transport emissions","(Mt CO"[2]*")")))+
  theme_milovanoff(legend_position = "right",
                   axis.title.y = element_text(hjust=0.8))

ggsave("outputs/plots/si/ghg_passenger_hist.png",width=6.5,height=3,units=c("in"),dpi=600)

tot_dt <- aggregate(formula=Value~Year,data=plot_dt,FUN=sum)
```





#2) Results

#Optimization scenarios

##Travel demand
###Transport activity
```{r vkt_pkt_optim_td}
res_2c <- do.call(read_def_outputs_f,list(function_tbc="optimization_pathway_f",sub_function_tbc = "transport_activity_f",scen_tbc="optimization_travel_demand_2c"))

plot_dt <- subset(res_2c[["transport_pkt"]],Year%in%c(2019:2050))
ggplot()+
  geom_col(data=plot_dt,
           aes(x=Year,y=Value/10^6,fill=Mode))+
  facet_wrap(~Scenario)+
  scale_fill_milovanoff(palette_type="div",
                        number_color=length(unique(plot_dt$Mode)),
                        guide=guide_legend(title="Tranport mode"))+
  scale_y_continuous(expand = c(0.01,0))+
  scale_x_continuous(expand = c(0.01,0),breaks = seq(2020,2050,10))+
  labs(x=NULL,y="Passenger activity \n (billion pkt)")+
  theme_milovanoff(legend_position = "right")

plot_dt <- subset(res_2c[["transport_vkt"]],Year%in%c(2019:2050))
ggplot()+
  geom_col(data=plot_dt,
           aes(x=Year,y=Value/10^6,fill=Mode))+
  facet_wrap(~Scenario)+
  scale_fill_milovanoff(palette_type="div",
                        number_color=length(unique(plot_dt$Mode)),
                        guide=guide_legend(title="Tranport mode"))+
  scale_y_continuous(expand = c(0.01,0))+
  scale_x_continuous(expand = c(0.01,0),breaks = seq(2020,2050,10))+
  labs(x=NULL,y="Vehicle activity \n (billion vkt)")+
  theme_milovanoff(legend_position = "right")

```
###Vehicle population
```{r veh_pop_optim_td}
res_2c <- do.call(read_def_outputs_f,list(function_tbc="optimization_pathway_f",sub_function_tbc = "transport_veh_pop_f",scen_tbc="optimization_travel_demand_2c"))

plot_dt <- subset(res_2c[["transport_veh_pop_dt"]],Year%in%c(2019:2050))
ggplot()+
  geom_col(data=plot_dt,
           aes(x=Year,y=Value/10^6,fill=Mode))+
  facet_wrap(~Scenario)+
  scale_fill_milovanoff(palette_type="div",
                        number_color=length(unique(plot_dt$Mode)),
                        guide=guide_legend(title="Tranport mode"))+
  scale_y_continuous(expand = c(0.01,0))+
  scale_x_continuous(expand = c(0.01,0),breaks = seq(2020,2050,10))+
  labs(x=NULL,y="Million vehicles")+
  theme_milovanoff(legend_position = "right")


```

###GHG emissions
```{r ghg_optim_td,fig.height=2.5,fig.width=5}
res_2c <- do.call(read_def_outputs_f,list(function_tbc="optimization_pathway_f",sub_function_tbc = "transport_lca_ghg_f",scen_tbc="optimization_travel_demand_2c"))

plot_dt <- subset(res_2c[["transport_lca_ghg_tot"]],Year%in%2019:2050)
plot_dt$Shift <- sapply(plot_dt$Scenario,function(x)str_sub(x,0,str_locate_all(x,"_")[[1]][1,"start"]-1),USE.NAMES = FALSE)
plot_dt$Shift <- factor(plot_dt$Shift,levels=c("PC","PT"))
plot_dt$Improve <- sapply(plot_dt$Scenario,function(x)str_sub(x,str_locate_all(x,"_")[[1]][1,"start"]+1,15),USE.NAMES = FALSE)
plot_dt$Improve <- factor(plot_dt$Improve,levels=c("Constant","EV"))

ggplot()+
  geom_line(data=plot_dt,
           aes(x=Year,y=Value/10^9,colour=Shift,linetype=Improve),
           size=1.1)+
  scale_y_continuous(expand = c(0.01,0),limits=c(0,NA))+
  scale_x_continuous(expand = c(0.01,0),breaks = seq(2020,2050,10))+
  scale_colour_milovanoff(palette_type = "cat",number_color = 2,guide = guide_legend(title="Modal share",order=1,nrow=1),labels=c("PC","PT"))+
  scale_linetype_manual(values=c(2,3),labels=c("Constant","EV"),guide=guide_legend(title="Vehicle technology",order=2,nrow=1))+
  labs(x=NULL,y=expression("Mt CO"[2]*" eq."))+
  theme_milovanoff(legend.position = c(0.55,0.2),
                   legend.direction = "vertical",
                   legend.margin = margin(t=-0.2,r=0.1,b=0.1,l=0.1, "cm"),
                   legend.box.just = "left",
                   legend.key.width = unit(1, "cm"))
#check budget
tot_co2_dt <- plot_dt %>% aggregate(formula=Value~Scenario,data=.,FUN=sum)
```


```{r ternary_graph, eval=FALSE, include=FALSE}
res <- read_simulation_f(function_tbc = "transport_lca_ghg_f",sub_function_tbc = "n",dts_name="transport_lca_ghg_tot",scen_tbc = "def",sim_tbc = "sim1",sim_type = "continuous")

#1) Associate the simulations to x, y and z in ternary graphs
#Only consider the simulations with target lower than score target
score_target <- do.call(fun_res_f,list(fun_name="transport_lca_ghg_target_f"))[["score_target"]]
reduction_dt <- subset(res,Year==2030 & Value>=score_target)
#Calculate the percent of reduction of each pathway
score_baseline <- max(reduction_dt$Value)
#Start by calculating the reductions for single pathways (from baseline, to one pathway)
pathway_cols <- grep("variable",colnames(reduction_dt),value=TRUE)
for (pathway in pathway_cols){
  for (case in setdiff(unique(reduction_dt[,pathway]),"0")){
    row_case_baseline <- which(reduction_dt[,pathway]==case & rowSums(sapply(setdiff(pathway_cols,pathway),function(x)reduction_dt[,x]=="0"))==(length(pathway_cols)-1))
    #Calculate the reductions compared to baseline (>0)
    reduction_dt[row_case_baseline,paste0(pathway,"_red")] <- (score_baseline-reduction_dt[row_case_baseline,"Value"])/(score_baseline-score_target)
  }
}
#Then, calculate the reductions for multiple pathways, considering modal_share the first pathway, fuel consumption improvements the second, and technology the third.
pathway = "modal_share_variable"
for (case in setdiff(unique(reduction_dt[,pathway]),"0")){
  row_case_baseline <- which(reduction_dt[,pathway]==case & rowSums(sapply(setdiff(pathway_cols,pathway),function(x)reduction_dt[,x]=="0"))==(length(pathway_cols)-1))
  #Calculate the reductions of additional pathways compared to the case
  for (add_pathway in setdiff(pathway_cols,pathway)){
    for (add_case in unique(reduction_dt[reduction_dt[,pathway]==case,add_pathway])){
      #Obtain row number of the case
      row_case <- which(reduction_dt[,pathway]==case & reduction_dt[,add_pathway]==add_case & rowSums(sapply(setdiff(pathway_cols,c(pathway,add_pathway)),function(x)reduction_dt[,x]=="0"))==(length(pathway_cols)-2))
      #Calculate reductions for first pathway
      reduction_dt[row_case,paste0(pathway,"_red")] <- (score_baseline-reduction_dt[row_case_baseline,"Value"])/(score_baseline-score_target)
      #Calculate reductions for the second pathway
      reduction_dt[row_case,paste0(add_pathway,"_red")] <- (reduction_dt[row_case_baseline,"Value"]-reduction_dt[row_case,"Value"])/(score_baseline-score_target)
    }
  }
}
#Calculate the reductions for multiple pathways in case of no modal share. FC is the pathway
pathway = "fc_variable"
for (case in setdiff(unique(reduction_dt[,pathway]),"0")){
  row_case_baseline <- which(reduction_dt[,pathway]==case & rowSums(sapply(setdiff(pathway_cols,pathway),function(x)reduction_dt[,x]=="0"))==(length(pathway_cols)-1))
  #Calculate the reductions of additional pathways compared to the case
  add_pathway="techno_variable"
  for (add_case in unique(reduction_dt[reduction_dt[,pathway]==case & reduction_dt[,"modal_share_variable"]=="0",add_pathway])){
    #Obtain row number of the case
    row_case <- which(reduction_dt[,"modal_share_variable"]=="0" & reduction_dt[,pathway]==case & reduction_dt[,add_pathway]==add_case )
    #Calculate reductions for first pathway
    reduction_dt[row_case,paste0(pathway,"_red")] <- (score_baseline-reduction_dt[row_case_baseline,"Value"])/(score_baseline-score_target)
    #Calculate reductions for the second pathway
    reduction_dt[row_case,paste0(add_pathway,"_red")] <- (reduction_dt[row_case_baseline,"Value"]-reduction_dt[row_case,"Value"])/(score_baseline-score_target)
  }
}
#Format
#Delete value and unit
reduction_dt <- subset(reduction_dt,techno_variable==0 | fc_variable==0 | modal_share_variable==0,select=-c(Unit,Value))
#force all NAs to 0
reduction_dt[is.na(reduction_dt)] <- 0

#2) Create the plot dataframe
dt_col <- c("PT","EV","FC","Value")
plot_dt <- setNames(data.frame(matrix(0,ncol = length(dt_col), nrow = 0),stringsAsFactors = FALSE,check.names = FALSE),dt_col)


#3) Get air pollutant emission results
#First case: Optimization on technology
for (optimized_variable in c("techno_variable","fc_variable","modal_share_variable")){
  scen_tbc <- switch(optimized_variable,
                     techno_variable="optimization_technology",
                     fc_variable="optimization_fc",
                     modal_share_variable="optimization_modal_share")
  sim_tbc <- switch(optimized_variable,
                     techno_variable="sim2",
                     fc_variable="sim3",
                     modal_share_variable="sim4")
  #
  res_emission <- read_simulation_f(function_tbc = "optimization_pathway_f",sub_function_tbc = "transport_on_road_emissions_f",dts_name="transport_on_road_emissions_tot",scen_tbc = scen_tbc,sim_tbc = sim_tbc,sim_type = "continuous")
  #
  value_dt <- subset(res_emission,Year==2030 & Pollutant=="PM")
  #
  for (i in 1:nrow(value_dt)){
  #Check if case is valide
  if (any(rowSums(sapply(setdiff(pathway_cols,optimized_variable),function(x)reduction_dt[,x]==value_dt[i,x]))==2)){
    #Get the row
    row_reduction <- which(rowSums(sapply(setdiff(pathway_cols,optimized_variable),function(x)reduction_dt[,x]==value_dt[i,x]))==2 & reduction_dt[,optimized_variable]=="0")
    #Add data to plot
    if (optimized_variable=="techno_variable"){
      tmp_dt <- data.frame(PT=reduction_dt[row_reduction,"modal_share_variable_red"],FC=reduction_dt[row_reduction,"fc_variable_red"],EV=1-sum(reduction_dt[row_reduction,c("modal_share_variable_red","fc_variable_red")]),Value=value_dt[i,"Value"])
    } else if (optimized_variable=="fc_variable"){
      tmp_dt <- data.frame(PT=reduction_dt[row_reduction,"modal_share_variable_red"],EV=reduction_dt[row_reduction,"techno_variable_red"],FC=1-sum(reduction_dt[row_reduction,c("modal_share_variable_red","techno_variable_red")]),Value=value_dt[i,"Value"])
    } else if (optimized_variable=="modal_share_variable"){
      tmp_dt <- data.frame(FC=reduction_dt[row_reduction,"fc_variable_red"],EV=reduction_dt[row_reduction,"techno_variable_red"],PT=1-sum(reduction_dt[row_reduction,c("fc_variable_red","techno_variable_red")]),Value=value_dt[i,"Value"])
    }
    #
    plot_dt <- rbind(plot_dt,tmp_dt)
  }
}

}

#4) Plot
plot_dt$Value <- plot_dt$Value/10^6

library(ggtern)
library(ggplot2)
#Base Plot
ggtern(data=plot_dt,aes(PT,FC,EV,value=Value))+
  geom_point()

ggtern(plot_dt,aes(PT,FC,EV,value=Value)) + 
  stat_interpolate_tern(geom="polygon",
                        formula=value~x+y,
                        method=lm,n=100,
                        breaks=seq(0,40,by=4),
                        aes(fill=..level..),expand=1)

```

