---
title: "paper3_si_190824"
output: html_document
---

#Setup 

```{r setup, include=FALSE}
fig_num<-0
tab_num<-0
fig_name<-TRUE
tab_name<-TRUE
knitr::opts_chunk$set(
	echo = FALSE,
	fig.keep = "all",
	fig.show = "asis",
	message = FALSE,
	warning = FALSE,
	dev='png',
	dpi=300
)
knitr::opts_knit$set(root.dir = '../')

#Own functions

library(ggplot2)
library(ggthemes)
library(scales)
library(RColorBrewer)
library(ggrepel)
library(cowplot)
#Defines the themes of the plots
theme_milovanoff <- function(base_size=14,legend_position="bottom",...) {
  theme_tmp <- theme_foundation(base_size=base_size)+
    theme(plot.title = element_text(face = "bold",size = rel(1.2), hjust = 0.5),
          text = element_text(),
          panel.background = element_rect(colour = NA),
          plot.background = element_rect(colour = NA),
          panel.border = element_rect(colour = NA),
          axis.title = element_text(face = "bold",size = rel(1)),
          axis.title.y = element_text(angle=90,vjust = 0.5),
          axis.title.x = element_text(vjust = 0.5),
          axis.text = element_text(), 
          axis.line = element_line(colour="black"),
          axis.ticks = element_line(),
          panel.grid.major = element_line(colour="#f0f0f0"),
          panel.grid.minor = element_blank(),
          legend.key = element_rect(colour = NA),
          legend.key.height = unit(0.3, "cm"),
          legend.key.width = unit(0.3, "cm"),
          legend.margin = margin(t=0.1,r=0.1,b=0.1,l=0.1, "cm"),
          legend.text = element_text(size = rel(0.8)),
          legend.spacing.x = unit(0.1, "cm"),
          legend.spacing.y = unit(0.1, "cm"),
          plot.margin=unit(c(2,4,2,2),"mm"),
          strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),
          strip.text = element_text(face="bold"),
          panel.spacing.x = unit(0.2, "cm"),
          panel.spacing.y =unit(0.2, "cm")
    )
  if (legend_position=="bottom"){
    theme_tmp <- theme_tmp+
      theme(legend.box = "vertical",
            legend.box.just = "top",
            legend.position = "bottom",
            legend.direction = "horizontal",
            legend.title = element_text(face="italic",rel(1.1),hjust=0.5))
  } else if (legend_position=="right"){
    theme_tmp<-theme_tmp+
      theme(legend.box = "vertical",
            legend.box.just = "left",
            legend.position = "right",
            legend.direction = "vertical",
            legend.title = element_text(face="italic",rel(1.1),hjust=0))
  }
  theme_tmp <- theme_tmp + theme(...)
  return(theme_tmp)
}
#See here: https://betterfigures.org/2015/06/23/picking-a-colour-scale-for-scientific-graphics/

get_color_palette <- function(palette_type,number_color){
  if (palette_type=="seq_blue"){
    #colorblind safe. Limit=9
    color_palette <- brewer.pal(number_color,"Blues")
  } else if (palette_type=="seq_green"){
    #colorblind safe. Limit=9
    color_palette <- brewer.pal(number_color,"Greens")
  } else if (palette_type=="seq_red"){
    #colorblind safe. Limit=9
    color_palette <- brewer.pal(number_color,"YlOrRd")
  } else if(palette_type=="div"){
    #colorblind safe. Limit=11
    color_palette <- brewer.pal(number_color,"RdYlBu")
  } else if(palette_type=="cat"){
    #Not colorblind safe. Limit=8. Dark2 or Set1 work
    color_palette <- brewer.pal(number_color,"Dark2")
  } else if(palette_type=="paired"){
    #Not colorblind safe. Limit=12
    color_palette <- brewer.pal(number_color,"Paired")
  }
  return(color_palette)
}

scale_fill_milovanoff <- function(palette_type,number_color,...){
  discrete_scale("fill","milovanoff",manual_pal(values = get_color_palette(palette_type=palette_type,number_color=number_color)), ...)
}

scale_colour_milovanoff <- function(palette_type,number_color,...){
  discrete_scale("colour","milovanoff",manual_pal(values = get_color_palette(palette_type=palette_type,number_color=number_color)), ...)
  
}
```

#Transport Activity
##PKT
```{r transport_activity_pkt,fig.height=3,fig.width=6}
source("model_script_run.R")
modelframework::load_input_data_f()
transport <- do.call(transport_activity_f,list())
res <- transport$get_list_dataframe()
plot_dt <- res[["transport_pkt"]]
ggplot()+
  geom_col(data=plot_dt,
           aes(x=Year,y=Value/10^6,fill=Mode))+
  scale_fill_milovanoff(palette_type="cat",
                        number_color=length(unique(plot_dt$Mode)),
                        guide=guide_legend(title="Tranport mode"))+
  scale_y_continuous(expand = c(0.01,0))+
  scale_x_continuous(expand = c(0.01,0),breaks = seq(2005,2030,5))+
  labs(x=NULL,y="Billion PKT")+
  theme_milovanoff(legend_position = "right")

#ggsave("outputs/plots/pkt_proj_constant.png",width=6,height=3,units=c("in"),dpi=600)
pkt_tot_dt <- aggregate(formula=Value~Year,data=plot_dt,FUN=sum)
```

##VKT
```{r transport_activity_vkt,fig.height=4,fig.width=6}
source("model_script_run.R")
modelframework::load_input_data_f()
transport <- do.call(transport_activity_f,list())
res <- transport$get_list_dataframe()
plot_dt <- res[["transport_vkt"]]
ggplot()+
  geom_col(data=plot_dt,
           aes(x=Year,y=Value/10^6,fill=Mode))+
  scale_fill_milovanoff(palette_type="cat",
                        number_color=length(unique(plot_dt$Mode)),
                        guide=guide_legend(title="Tranport mode"))+
  scale_y_continuous(expand = c(0.01,0))+
  scale_x_continuous(expand = c(0.01,0),breaks = seq(2005,2030,5))+
  labs(x=NULL,y="Billion VKT")+
  theme_milovanoff(legend_position = "right")

#ggsave("outputs/plots/vkt_oroj_constant.png",width=6,height=3,units=c("in"),dpi=600)
```

##Vehicle population
```{r transport_veh_pop,fig.height=4,fig.width=6}
source("model_script_run.R")
modelframework::load_input_data_f()
res <- do.call(transport_veh_pop_f,list())
plot_dt <- res[["transport_veh_pop_dt"]]
ggplot()+
  geom_col(data=plot_dt,
           aes(x=Year,y=Value/10^3,fill=Mode))+
  scale_fill_milovanoff(palette_type="cat",
                        number_color=length(unique(plot_dt$Technology)),
                        guide=guide_legend(title="Tranport mode"))+
  scale_y_continuous(expand = c(0.01,0))+
  scale_x_continuous(expand = c(0.01,0),breaks = seq(2005,2030,5))+
  labs(x=NULL,y="Thousand vehicles")+
  theme_milovanoff(legend_position = "right")

#ggsave("outputs/plots/fuel_type.png",width=6,height=4,units=c("in"),dpi=600)
```

#Private car

##Private car: Technology
```{r transport_veh_pop,fig.height=4,fig.width=6}
source("model_script_run.R")
modelframework::load_input_data_f()
res <- do.call(transport_veh_pop_f,list())
plot_dt <- subset(res[["transport_veh_pop_dt"]],Mode=="Private car")
ggplot()+
  geom_col(data=plot_dt,
           aes(x=Year,y=Value/10^3,fill=Technology))+
  scale_fill_milovanoff(palette_type="cat",
                        number_color=length(unique(plot_dt$Technology)),
                        guide=guide_legend(title="Technology"))+
  scale_y_continuous(expand = c(0.01,0))+
  scale_x_continuous(expand = c(0.01,0),breaks = seq(2005,2030,5))+
  labs(x=NULL,y="Thousand vehicles")+
  theme_milovanoff(legend_position = "right")

#ggsave("outputs/plots/fuel_type.png",width=6,height=4,units=c("in"),dpi=600)
```


#Fuel use by transport mode
```{r transport_fuel_use,fig.height=6,fig.width=6}
source("model_script_run.R")
modelframework::load_input_data_f()
res <- do.call(transport_fuel_use_f,list())
plot_dt <- res[["transport_fuel_use_dt"]]
ggplot()+
  geom_col(data=plot_dt,
           aes(x=Year,y=Value/10^9,fill=Mode))+
  facet_wrap(~Fuel,ncol=1,scales = "free_y")+
  scale_fill_milovanoff(palette_type="cat",
                        number_color=length(unique(plot_dt$Mode)),
                        guide=guide_legend(title="Tranport mode"))+
  scale_y_continuous(expand = c(0.01,0))+
  scale_x_continuous(expand = c(0.01,0),breaks = seq(2005,2030,5))+
  labs(x=NULL,y="Billion L")+
  theme_milovanoff(legend_position = "right")

#ggsave("outputs/plots/fuel_type.png",width=6,height=4,units=c("in"),dpi=600)

#Calculate total fuel use
tot_dt <- aggregate(formula=Value~Fuel+Year,data=plot_dt,FUN=sum)
```

#LCA 

```{r transport_lca_ghg,fig.height=4,fig.width=6}
source("model_script_run.R")
modelframework::load_input_data_f()
res <- do.call(transport_lca_ghg_f,list())
plot_dt <- res[["transport_lca_ghg_mode"]]
ggplot()+
  geom_col(data=plot_dt,
           aes(x=Year,y=Value/10^9,fill=Mode))+
  scale_fill_milovanoff(palette_type="cat",
                        number_color=length(unique(plot_dt$Mode)),
                        guide=guide_legend(title="Tranport mode"))+
  scale_y_continuous(expand = c(0.01,0))+
  scale_x_continuous(expand = c(0.01,0),breaks = seq(2005,2030,5))+
  labs(x=NULL,y=expression("Mt CO"[2]))+
  theme_milovanoff(legend_position = "right")

#ggsave("outputs/plots/ghg_proj_constant.png",width=6,height=3,units=c("in"),dpi=600)

tot_dt <- aggregate(formula=Value~Year,data=plot_dt,FUN=sum)
```