matrix_vkt
colnames(matrix_vkt) <- as.numeric(year)-as.numeric(colnames(matrix_vkt))
mat_fC_uf * matrix_vkt[,colnames(mat_fC_uf)]
sum(mat_fC_uf * matrix_vkt[,colnames(mat_fC_uf)])
as.numeric(year)-as.numeric(colnames(matrix_vkt))
as.numeric(colnames(matrix_vkt)
)
colnames(matrix_vkt)[-1]
colnames(matrix_vkt)[-year]
year="2005"
colnames(matrix_vkt)[-year]
sum((mat_fC_uf * matrix_vkt[,colnames(mat_fC_uf)])[,colnames(matrix_vkt)[-1]])
matrix_average_onroad_fc[,year]
matrix_average_onroad_fc[,year]/100
sum((mat_fC_uf * matrix_vkt[,colnames(mat_fC_uf)])[,colnames(matrix_vkt)[-1]])
matrix_vkt[,year]
(matrix_average_onroad_fc[,year]/100 - sum((mat_fC_uf * matrix_vkt[,colnames(mat_fC_uf)])[,colnames(matrix_vkt)[-1]]))/matrix_vkt[,year]
#Calculate the resulting fuel consumption to achieve top-down gasoline consumption
new_fc <- (matrix_average_onroad_fc[,year]/100 - sum((mat_fC_uf * matrix_vkt[,colnames(mat_fC_uf)])[,colnames(matrix_vkt)[-1]]))/matrix_vkt[,year]*100
new_fc
mat_fc
#Loop for technology
for (year in as.character(2005:2017)) {
#Extract matrix of vkt by technology and age for year
matrix_vkt <- fleet_car$vint_vkt[[year]]["ICEV-G",,drop=FALSE]/sum(fleet_car$vint_vkt[[year]]["ICEV-G",,drop=FALSE])
colnames(matrix_vkt) <- as.numeric(year)-as.numeric(colnames(matrix_vkt))
#Calculate fuel use by technology and fuel, and fill vint_fuel_use
#Get partial fuel consumption
mat_fC_uf <- mat_fc[,as.character((as.numeric(year)-15):year),drop=FALSE]/100
#Calculate the resulting fuel consumption to achieve top-down gasoline consumption
new_fc <- (matrix_average_onroad_fc[,year]/100 - sum((mat_fC_uf * matrix_vkt[,colnames(mat_fC_uf)])[,colnames(matrix_vkt)[-1]]))/matrix_vkt[,year]*100
# if (new_fc>11){
#   mat_fc["ICEV-G_Gasoline",year] <- 11
# } else if (new_fc<8) {
#   mat_fc["ICEV-G_Gasoline",year] <- 8
# } else {
#   mat_fc["ICEV-G_Gasoline",year] <- new_fc
# }
#
mat_fc[1,year] <- new_fc
}
mat_fc
mat_fc[,as.character(2005:2017)] <- NA
mat_fc
source("model_script_run.R")
#Load data inputs in environment
modelframework::load_input_data_f()
#Load attribute values in environment
modelframework::load_attribute_value()
source("model_script_run.R")
modelframework::load_input_data_f()
res <- do.call(transport_lca_ghg_f,list())
plot_dt <- res[["transport_lca_ghg_mode"]]
ggplot()+
geom_col(data=plot_dt,
aes(x=Year,y=Value/10^9,fill=Mode))+
scale_fill_milovanoff(palette_type="cat",
number_color=length(unique(plot_dt$Mode)),
guide=guide_legend(title="Tranport mode"))+
scale_y_continuous(expand = c(0.01,0))+
scale_x_continuous(expand = c(0.01,0),breaks = seq(2005,2030,5))+
labs(x=NULL,y=expression("Mt CO"[2]))+
theme_milovanoff(legend_position = "right")
fig_num<-0
tab_num<-0
fig_name<-TRUE
tab_name<-TRUE
knitr::opts_chunk$set(
echo = FALSE,
fig.keep = "all",
fig.show = "asis",
message = FALSE,
warning = FALSE,
dev='png',
dpi=300
)
knitr::opts_knit$set(root.dir = '../')
#Own functions
library(ggplot2)
library(ggthemes)
library(scales)
library(RColorBrewer)
library(ggrepel)
library(cowplot)
#Defines the themes of the plots
theme_milovanoff <- function(base_size=14,legend_position="bottom",...) {
theme_tmp <- theme_foundation(base_size=base_size)+
theme(plot.title = element_text(face = "bold",size = rel(1.2), hjust = 0.5),
text = element_text(),
panel.background = element_rect(colour = NA),
plot.background = element_rect(colour = NA),
panel.border = element_rect(colour = NA),
axis.title = element_text(face = "bold",size = rel(1)),
axis.title.y = element_text(angle=90,vjust = 0.5),
axis.title.x = element_text(vjust = 0.5),
axis.text = element_text(),
axis.line = element_line(colour="black"),
axis.ticks = element_line(),
panel.grid.major = element_line(colour="#f0f0f0"),
panel.grid.minor = element_blank(),
legend.key = element_rect(colour = NA),
legend.key.height = unit(0.3, "cm"),
legend.key.width = unit(0.3, "cm"),
legend.margin = margin(t=0.1,r=0.1,b=0.1,l=0.1, "cm"),
legend.text = element_text(size = rel(0.8)),
legend.spacing.x = unit(0.1, "cm"),
legend.spacing.y = unit(0.1, "cm"),
plot.margin=unit(c(2,4,2,2),"mm"),
strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),
strip.text = element_text(face="bold"),
panel.spacing.x = unit(0.2, "cm"),
panel.spacing.y =unit(0.2, "cm")
)
if (legend_position=="bottom"){
theme_tmp <- theme_tmp+
theme(legend.box = "vertical",
legend.box.just = "top",
legend.position = "bottom",
legend.direction = "horizontal",
legend.title = element_text(face="italic",rel(1.1),hjust=0.5))
} else if (legend_position=="right"){
theme_tmp<-theme_tmp+
theme(legend.box = "vertical",
legend.box.just = "left",
legend.position = "right",
legend.direction = "vertical",
legend.title = element_text(face="italic",rel(1.1),hjust=0))
}
theme_tmp <- theme_tmp + theme(...)
return(theme_tmp)
}
#See here: https://betterfigures.org/2015/06/23/picking-a-colour-scale-for-scientific-graphics/
get_color_palette <- function(palette_type,number_color){
if (palette_type=="seq_blue"){
#colorblind safe. Limit=9
color_palette <- brewer.pal(number_color,"Blues")
} else if (palette_type=="seq_green"){
#colorblind safe. Limit=9
color_palette <- brewer.pal(number_color,"Greens")
} else if (palette_type=="seq_red"){
#colorblind safe. Limit=9
color_palette <- brewer.pal(number_color,"YlOrRd")
} else if(palette_type=="div"){
#colorblind safe. Limit=11
color_palette <- brewer.pal(number_color,"RdYlBu")
} else if(palette_type=="cat"){
#Not colorblind safe. Limit=8. Dark2 or Set1 work
color_palette <- brewer.pal(number_color,"Dark2")
} else if(palette_type=="paired"){
#Not colorblind safe. Limit=12
color_palette <- brewer.pal(number_color,"Paired")
}
return(color_palette)
}
scale_fill_milovanoff <- function(palette_type,number_color,...){
discrete_scale("fill","milovanoff",manual_pal(values = get_color_palette(palette_type=palette_type,number_color=number_color)), ...)
}
scale_colour_milovanoff <- function(palette_type,number_color,...){
discrete_scale("colour","milovanoff",manual_pal(values = get_color_palette(palette_type=palette_type,number_color=number_color)), ...)
}
ggplot()+
geom_col(data=plot_dt,
aes(x=Year,y=Value/10^9,fill=Mode))+
scale_fill_milovanoff(palette_type="cat",
number_color=length(unique(plot_dt$Mode)),
guide=guide_legend(title="Tranport mode"))+
scale_y_continuous(expand = c(0.01,0))+
scale_x_continuous(expand = c(0.01,0),breaks = seq(2005,2030,5))+
labs(x=NULL,y=expression("Mt CO"[2]))+
theme_milovanoff(legend_position = "right")
source("model_script_run.R")
modelframework::load_input_data_f()
res <- do.call(transport_fuel_use_f,list())
plot_dt <- res[["transport_fuel_use_dt"]]
ggplot()+
geom_col(data=plot_dt,
aes(x=Year,y=Value/10^9,fill=Mode))+
facet_wrap(~Fuel,ncol=1,scales = "free_y")+
scale_fill_milovanoff(palette_type="cat",
number_color=length(unique(plot_dt$Mode)),
guide=guide_legend(title="Tranport mode"))+
scale_y_continuous(expand = c(0.01,0))+
scale_x_continuous(expand = c(0.01,0),breaks = seq(2005,2030,5))+
labs(x=NULL,y="Billion L")+
theme_milovanoff(legend_position = "right")
#ggsave("outputs/plots/fuel_type.png",width=6,height=4,units=c("in"),dpi=600)
#Calculate total fuel use
tot_dt <- aggregate(formula=Value~Fuel+Year,data=plot_dt,FUN=sum)
source("model_script_run.R")
modelframework::load_input_data_f()
transport <- do.call(transport_activity_f,list())
res <- transport$get_list_dataframe()
.self <- transport
.self$get_data_frame("kt_per_veh")
.self
field_name="kt_per_veh"
field_values <- .self$field(field_name)
field_values
as.data.frame(field_values,stringsAsFactors = FALSE)
as.data.frame(field_values,stringsAsFactors = FALSE) %>%
cbind(Mode=rownames(field_values),stringsAsFactors = FALSE)
as.data.frame(field_values,stringsAsFactors = FALSE) %>%
cbind(Mode=rownames(field_values),stringsAsFactors = FALSE) %>%
gather("Year","Value",-Mode,convert=TRUE)
as.data.frame(field_values,stringsAsFactors = FALSE) %>%
cbind(Mode=rownames(field_values),stringsAsFactors = FALSE) %>%
gather("Year","Value",-Mode,convert=TRUE) %>%
cbind(Unit=.self$units[field_name],stringsAsFactors = FALSE)
as.data.frame(field_values,stringsAsFactors = FALSE) %>%
cbind(Mode=rownames(field_values),stringsAsFactors = FALSE) %>%
gather("Year","Value",-Mode,convert=TRUE)
.self$units[field_name]
class(.self$units[field_name])
as.character(.self$units[field_name])
as.data.frame(field_values,stringsAsFactors = FALSE) %>%
cbind(Mode=rownames(field_values),stringsAsFactors = FALSE) %>%
gather("Year","Value",-Mode,convert=TRUE) %>%
cbind(Unit=as.character(.self$units[field_name]),stringsAsFactors = FALSE)
#' transportClass
#' @import tidyr
#' @export
transportClass <- setRefClass("transportClass",
fields = list(kt_per_veh="matrix",
load_factors="matrix",
vkt="matrix",
pkt="matrix",
units="character"),
methods = list(
###>Function: Initialize the object
initialize = function(){
.self$units <- c(kt_per_veh="km/(veh.year)",
load_factors="passenger/veh",
vkt="thousand km",
pkt="thousand passenger")
},
###>Function: Return the fields of the vehicle as data.frame
get_data_frame = function(field_name){
field_values <- .self$field(field_name)
#Convert matrix into long dataframe
field_dt <- as.data.frame(field_values,stringsAsFactors = FALSE) %>%
cbind(Mode=rownames(field_values),stringsAsFactors = FALSE) %>%
gather("Year","Value",-Mode,convert=TRUE) %>%
cbind(Unit=as.character(.self$units[field_name]),stringsAsFactors = FALSE)
return(field_dt)
},
###Function: Return all the fields into list of dataframe
get_list_dataframe = function(){
return(list(transport_kt_per_veh=.self$get_data_frame("kt_per_veh"),
transport_load_factors=.self$get_data_frame("load_factors"),
transport_vkt=.self$get_data_frame("vkt"),
transport_pkt=.self$get_data_frame("pkt")))
}
))
transport$get_list_dataframe()
.self$get_data_frame("kt_per_veh")
source("model_script_run.R")
modelframework::load_input_data_f()
transport <- do.call(transport_activity_f,list())
res <- transport$get_list_dataframe()
View(res)
transport_pkt <- res[["transport_pkt"]]
View(transport_pkt)
tot_transport_pkt <- aggregate(formula=Value~Year,data=transport_pkt,FUN=sum)
tot_transport_pkt
tot_transport_pkt$Value <- tot_transport_pkt$Value*10^3
tot_transport_pkt
#Delete projections
tot_transport_pkt <- subset(tot_transport_pkt,Year<=2018)
tot_transport_pkt
#GEt population data
pop_dt <- read.csv("inputs/data/population_singapore.csv",stringsAsFactors = FALSE, check.names = FALSE)
#
tot_transport_pkt$Population <- sapply(1:nrow(tot_transport_pkt),function(x)subset(pop_dt,Year==tot_transport_pkt[x,"Year"] & Scenario=="Medium")$Value)
tot_transport_pkt
ln?
)
View(tot_transport_pkt)
lm(formula=Value~Population,data=tot_transport_pkt)
lm$summary
lin_reg <- lm(formula=Value~Population,data=tot_transport_pkt)
summary(lin_reg)
summary(lin_reg)
tot_transport_pkt
summary(lin_reg)
#Get GDP data
gdp_dt <- read.csv("inputs/data/gdp_singapore.csv",stringsAsFactors = FALSE, check.names = FALSE)
tot_transport_pkt$GDP <- sapply(1:nrow(tot_transport_pkt),function(x)subset(gdp_dt,Year==tot_transport_pkt[x,"Year"])$Value)
tot_transport_pkt
lin_reg <- lm(formula=Value~Population+GDP,data=tot_transport_pkt)
summary(lin_reg)
lin_reg <- lm(formula=Value~GDP,data=tot_transport_pkt)
summary(lin_reg)
lin_reg <- lm(formula=Value~Population+GDP,data=tot_transport_pkt)
summary(lin_reg)
lin_reg <- lm(formula=Value~Population,data=tot_transport_pkt)
summary(lin_reg)
#Read and save all data inputs in R format
modelframework::save_input_data_f()
#Load data inputs in environment
modelframework::load_input_data_f()
get_input_f("population")
pop_dt <- get_input_f("population")
pop_dt
transport
attribute_f("transport_activity_f")
#Initialize the fleet object with historical data
transport <- do.call(transport_activity_initialize_f,list())
transport
colSums(transport$pkt)
class(colSums(transport$pkt))
colSums(transport$pkt,drop=FALSE)
as.matrix(colSums(transport$pkt))
mat_tot_pkt <- t(as.matrix(colSums(transport$pkt)))
mat_tot_pkt
View(pop_dt)
#Create matrix of population
mat_pop <- susbet(pop_dt,Scenario=="Medium" & Year <= last_yr) %>%
acast(data=., Country ~ Year , value.var='Value',fun.aggregate=sum, margins=FALSE)
#Create matrix of population
mat_pop <- subset(pop_dt,Scenario=="Medium" & Year <= last_yr) %>%
acast(data=., Country ~ Year , value.var='Value',fun.aggregate=sum, margins=FALSE)
attribute_f("transport_activity_proj_f")
#Create matrix of population
mat_pop <- subset(pop_dt,Scenario=="Medium" & Year <= last_yr) %>%
acast(data=., Country ~ Year , value.var='Value',fun.aggregate=sum, margins=FALSE)
mat_pop
mat_tot_pkt
mat_tot_pkt[,as.character(2005:2018)]
lm(mat_tot_pkt[,as.character(2005:2018)]~mat_pop[,as.character(2005:2018)])
#Calculate linear regression
lin_reg <- lm(mat_tot_pkt[,as.character(2005:2018)]~mat_pop[,as.character(2005:2018)])
lin_reg
lin_reg$coefficients
class(lin_reg$coefficients)
lin_reg$coefficients[1]
lin_reg$coefficients[1]
mat_tot_pkt
lin_reg$coefficients[1]+lin_reg$coefficients[2]*mat_pop[,as.character(2019:2030)]
#Project total pkt
mat_tot_pkt[,as.character(2019:2030)] <- lin_reg$coefficients[1]+lin_reg$coefficients[2]*mat_pop[,as.character(2019:2030)]
mat_tot_pkt
transport
first_proj_yr
first_proj_yr <- min(as.numeric(colnames(transport$vkt)[is.na(transport$vkt[1,])]))
first_yr=2005
#Assumed constant total population of Private car
transport$vkt
#Assumed constant total population of Private car
transport$vkt["Private car",as.character(first_proj_yr:last_yr)]
transport$vkt["Private car",as.character(first_proj_yr:last_yr)]
transport$kt_per_veh["Private car",as.character(first_proj_yr:last_yr)]
transport$kt_per_veh
#Assumed constant total population of Private car.
transport$kt_per_veh["Private car",as.character(first_proj_yr:last_yr)] <- 17500
transport$kt_per_veh
transport$vkt["Private car",as.character(first_proj_yr-1)]
transport$kt_per_veh["Private car",as.character(first_proj_yr-)]
transport$kt_per_veh["Private car",as.character(first_proj_yr-1)]
transport$kt_per_veh
transport$kt_per_veh["Private car",as.character(first_proj_yr-1)]
transport$vkt["Private car",as.character(first_proj_yr-1)]
transport$vkt["Private car",as.character(first_proj_yr-1)]/transport$kt_per_veh["Private car",as.character(first_proj_yr-1)]
transport$vkt["Private car",as.character(first_proj_yr-1)]/transport$kt_per_veh["Private car",as.character(first_proj_yr-1)]
#Assumed constant total population of Private car.
transport$vkt["Private car",as.character(first_proj_yr:last_yr)] <- (transport$vkt["Private car",as.character(first_proj_yr-1)]/transport$kt_per_veh["Private car",as.character(first_proj_yr-1)])*transport$kt_per_veh["Private car",as.character(first_proj_yr:last_yr)]
transport$vkt
transport$pkt["Private car",as.character(first_proj_yr:last_yr)]
transport$vkt["Private car",as.character(first_proj_yr:last_yr)]
transport$load_factors
transport$load_factors["Private car",as.character(first_proj_yr:last_yr)]
transport$load_factors
transport$load_factors["Private car",as.character(first_proj_yr:last_yr)] <- 1.2
transport$load_factors["Private car",as.character(first_proj_yr:last_yr)]
transport$load_factors["Private car",as.character(first_proj_yr:last_yr)]*transport$vkt["Private car",as.character(first_proj_yr:last_yr)]
transport$pkt["Private car",as.character(first_proj_yr:last_yr)] <- transport$load_factors["Private car",as.character(first_proj_yr:last_yr)]*transport$vkt["Private car",as.character(first_proj_yr:last_yr)]
transport$pkt
transport$pkt
transport$kt_per_veh["Motorcycle",as.character(first_proj_yr-1)]
#Assume constant motorcycle population
mode="Motorcycle"
transport$kt_per_veh[mode,as.character(first_proj_yr:last_yr)] <- transport$kt_per_veh[mode,as.character(first_proj_yr-1)]
transport$load_factors[mode,as.character(first_proj_yr:last_yr)] <- 1
transport$kt_per_veh[mode,as.character(first_proj_yr:last_yr)] <- transport$kt_per_veh[mode,as.character(first_proj_yr-1)]
transport$load_factors[mode,as.character(first_proj_yr:last_yr)] <- 1
#Assumed constant total population of Private car.
transport$vkt[mode,as.character(first_proj_yr:last_yr)] <- transport$vkt[mode,as.character(first_proj_yr-1)]
transport$pkt[mode,as.character(first_proj_yr:last_yr)] <- transport$pkt[mode,as.character(first_proj_yr-1)]
transport
transport$pkt
transport
mat_tot_pkt
mat_tot_pkt
transport$pkt
transport
transport$pkt
transport$pkt
transport$pkt
transport$pkt["MRT",]
plot(transport$pkt["MRT",])
transport$pkt/colSums(transport$pkt)
transport$pkt %*% (diag=1/colSums(transport$pkt))
transport$pkt
colSums(transport$pkt[,as.character(2005:2018)])
1/colSums(transport$pkt[,as.character(2005:2018)])
diag(1/colSums(transport$pkt[,as.character(2005:2018)]))
transport$pkt[,as.character(2005:2018)] %*% diag(1/colSums(transport$pkt[,as.character(2005:2018)]))
colSums(transport$pkt[,as.character(2005:2018)] %*% diag(1/colSums(transport$pkt[,as.character(2005:2018)])))
transport$pkt[,as.character(2005:2018)] %*% diag(1/colSums(transport$pkt[,as.character(2005:2018)]))
transport$load_factors
transport$kt_per_veh
transport$pkt[c("Private car","Taxi")]
transport$pkt[c("Private car","Taxi"),]
colSums(transport$pkt[c("Private car","Taxi"),])
mat_tot_pkt
transport$kt_per_veh
attribute_f("transport_activity_f")
#Initialize the fleet object with historical data
transport <- do.call(transport_activity_initialize_f,list())
attribute_f("transport_activity_proj_f")
pop_dt <- get_input_f("population")
first_proj_yr <- min(as.numeric(colnames(transport$vkt)[is.na(transport$vkt[1,])]))
#Update mode with endogeneous assumptions (outside scenarios)
for (mode in c("School bus","Private bus")){
transport$kt_per_veh[mode,as.character(first_proj_yr:last_yr)] <- transport$kt_per_veh[mode,as.character(first_proj_yr-1)]
transport$load_factors[mode,as.character(first_proj_yr:last_yr)] <- 1
#Assumed constant total population of Private car.
transport$vkt[mode,as.character(first_proj_yr:last_yr)] <- transport$vkt[mode,as.character(first_proj_yr-1)]
transport$pkt[mode,as.character(first_proj_yr:last_yr)] <- transport$pkt[mode,as.character(first_proj_yr-1)]
}
transport$pkt
#Create matrix of total pkt
mat_tot_pkt <- t(as.matrix(colSums(transport$pkt)))
#Create matrix of population
mat_pop <- subset(pop_dt,Scenario=="Medium" & Year <= last_yr) %>%
acast(data=., Country ~ Year , value.var='Value',fun.aggregate=sum, margins=FALSE)
#Calculate linear regression
lin_reg <- lm(mat_tot_pkt[,as.character(first_yr:(first_proj_yr-1))]~mat_pop[,as.character(first_yr:(first_proj_yr-1))])
#Project total pkt
mat_tot_pkt[,as.character(first_proj_yr:last_yr)] <- lin_reg$coefficients[1]+lin_reg$coefficients[2]*mat_pop[,as.character(first_proj_yr:last_yr)]
mat_tot_pkt
transport$pkt
rownames(transport$pkt)
onroad_car_pop <- read.csv("inputs/data/annual-motor-vehicle-population-by-type-of-fuel-used.csv",stringsAsFactors = FALSE)
onroad_car_pop
#Script to establish trends in school bus PKT
source("model_script_run.R")
modelframework::load_input_data_f()
transport <- do.call(transport_activity_f,list())
attribute_f("transport_activity_proj_f")
first_proj_yr <- min(as.numeric(colnames(transport$vkt)[is.na(transport$vkt[1,])]))
(pkt_proj_tot_scen=="bau")
#Script to establish trends in school bus PKT
source("model_script_run.R")
modelframework::load_input_data_f()
modelframework::load_attribute_value()
transport <- do.call(transport_activity_f,list())
res <- transport$get_list_dataframe()
transport_pkt <- res[["transport_pkt"]]
transport_pkt
pkt_dt <- subset(transport_pkt,mode=="School bus")
pkt_dt <- subset(transport_pkt,Mode=="School bus")
View(pkt_dt)
pkt_dt <- subset(transport_pkt,Mode=="School bus" & Year<2019)
#Get input data of Singaporean population by age
pop_dt <- read.csv("inputs/data/historical_population_age.csv",stringsAsFactors = FALSE, check.names = FALSE)
View(pop_dt)
long_pop_dt <- gather(data=pop_dt,key="Age",value="Value",convert=TRUE)
View(long_pop_dt)
long_pop_dt <- gather(data=pop_dt,key="Year",value="Value",-c(Age),convert=TRUE)
long_pop_dt <- subset(long_pop_dt,Age%in%c("10-14 Years","15-19 Years"))
long_pop_dt <- gather(data=pop_dt,key="Year",value="Value",-c(Age),convert=TRUE)
subset(long_pop_dt,Age%in%c(" 10-14 Years"," 15-19 Years"))
long_pop_dt[5,]
long_pop_dt[5,"Age"]
subset(long_pop_dt,Age%in%c(" 10-14 Years "," 15-19 Years "))
long_pop_dt <- subset(long_pop_dt,Age%in%c(" 10-14 Years "," 15-19 Years ")) %>%
aggregate(formula=Value~Year,FUN=sum)
long_pop_dt <- subset(long_pop_dt,Age%in%c(" 10-14 Years "," 15-19 Years ")) %>%
aggregate(formula=Value~Year,FUN=sum,data=.)
subset(long_pop_dt,Age%in%c(" 10-14 Years "," 15-19 Years "))
long_pop_dt <- gather(data=pop_dt,key="Year",value="Value",-c(Age),convert=TRUE)
subset(long_pop_dt,Age%in%c(" 10-14 Years "," 15-19 Years "))
long_pop_dt <- subset(long_pop_dt,Age%in%c(" 10-14 Years "," 15-19 Years ")) %>%
aggregate(formula=Value~Year,FUN=sum,data=.)
long_pop_dt
sapply(1:nrow(pkt_dt),function(x)sum(subset(long_pop_dt,Age%in%c(" 10-14 Years "," 15-19 Years ") & Year==pkt_dt[x,"Year"])$Value))
long_pop_dt <- gather(data=pop_dt,key="Year",value="Value",-c(Age),convert=TRUE)
sapply(1:nrow(pkt_dt),function(x)sum(subset(long_pop_dt,Age%in%c(" 10-14 Years "," 15-19 Years ") & Year==pkt_dt[x,"Year"])$Value))
pkt_dt$Population <- sapply(1:nrow(pkt_dt),function(x)sum(subset(long_pop_dt,Age%in%c(" 10-14 Years "," 15-19 Years ") & Year==pkt_dt[x,"Year"])$Value))
lm(Value~Population,data=pkt_dt)
lin_reg <- lm(Value~Population,data=pkt_dt)
summary(lin_reg)
age_tbc <- c(" 10-14 Years "," 15-19 Years ")
pkt_dt$Population <- sapply(1:nrow(pkt_dt),function(x)sum(subset(long_pop_dt,Age%in%age_tbc & Year==pkt_dt[x,"Year"])$Value))
lin_reg <- lm(Value~Population,data=pkt_dt)
summary(lin_reg)
age_tbc <- c(" 5-9 Years "," 10-14 Years "," 15-19 Years ")
pkt_dt$Population <- sapply(1:nrow(pkt_dt),function(x)sum(subset(long_pop_dt,Age%in%age_tbc & Year==pkt_dt[x,"Year"])$Value))
lin_reg <- lm(Value~Population,data=pkt_dt)
summary(lin_reg)
age_tbc <- c(" 5-9 Years "," 10-14 Years ")
pkt_dt$Population <- sapply(1:nrow(pkt_dt),function(x)sum(subset(long_pop_dt,Age%in%age_tbc & Year==pkt_dt[x,"Year"])$Value))
lin_reg <- lm(Value~Population,data=pkt_dt)
summary(lin_reg)
age_tbc <- c(" 5-9 Years ")
pkt_dt$Population <- sapply(1:nrow(pkt_dt),function(x)sum(subset(long_pop_dt,Age%in%age_tbc & Year==pkt_dt[x,"Year"])$Value))
lin_reg <- lm(Value~Population,data=pkt_dt)
summary(lin_reg)
age_tbc <- c(" 5-9 Years "," 10-14 Years ")
pkt_dt$Population <- sapply(1:nrow(pkt_dt),function(x)sum(subset(long_pop_dt,Age%in%age_tbc & Year==pkt_dt[x,"Year"])$Value))
lin_reg <- lm(Value~Population,data=pkt_dt)
summary(lin_reg)
